load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_to_bin")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")

package(default_visibility = ["//visibility:public"])

ts_project(
    name = "electron_ts",
    tsconfig = "//:tsconfig",
    deps = [
        "//proto:index",
        "//server:server_ts",
    ]
)

# Copy source files to bin
copy_to_bin(
    name = "main_js",
    srcs = ["main.ts"],
)

copy_to_bin(
    name = "preload_js",
    srcs = ["preload.ts"],
)

# Copy package.json
copy_to_bin(
    name = "package_json",
    srcs = ["package.json"],
)

# Electron Forge configuration files
copy_to_bin(
    name = "forge_config",
    srcs = ["forge.config.ts"],
)

copy_to_bin(
    name = "vite_main_config",
    srcs = ["vite.main.config.ts"],
)

copy_to_bin(
    name = "vite_preload_config",
    srcs = ["vite.preload.config.ts"],
)

copy_to_bin(
    name = "vite_renderer_config",
    srcs = ["vite.renderer.config.ts"],
)
copy_to_bin(
    name = "index_html",
    srcs = ["index.html", "renderer.ts"],
)

# Build and package with Electron Forge
# Run with: bazel build //electron:package
genrule(
    name = "package",
    srcs = [
        ":index_html",
        ":main_js",
        ":preload_js",
        ":package_json",
        ":forge_config",
        ":vite_main_config",
        ":vite_preload_config",
        ":vite_renderer_config",
        "//:node_modules",
        "//:package_json",
        "//client:client_src",
        "//proto:index",
        "//server:server_ts",
    ],
    outs = ["package.stamp"],
    cmd = """
        # Change to workspace root
        cd $$(dirname $(location //:package_json))

        # Run electron-forge package
        pnpm package

        # Create stamp file
        echo "Packaged at $$(date)" > $(location package.stamp)
    """,
    local = True,
    tags = ["no-sandbox"],
)

# Make distributable packages (installers)
# Run with: bazel build //electron:make
genrule(
    name = "make",
    srcs = [
        ":main_js",
        ":preload_js",
        ":package_json",
        ":forge_config",
        ":vite_main_config",
        ":vite_preload_config",
        ":vite_renderer_config",
        "//:node_modules",
        "//:package_json",
        "//client:client_src",
        "//proto:index",
        "//server:server_ts",
    ],
    outs = ["make.stamp"],
    cmd = """
        # Change to workspace root
        cd $$(dirname $(location //:package_json))

        # Run electron-forge make
        pnpm make

        # Create stamp file
        echo "Made installers at $$(date)" > $(location make.stamp)
    """,
    local = True,
    tags = ["no-sandbox"],
)

# Development server - run with: bazel run //electron:start
# This starts Electron Forge in development mode with hot reload
genrule(
    name = "start",
    srcs = [
        ":main_js",
        ":preload_js",
        ":package_json",
        ":forge_config",
        ":vite_main_config",
        ":vite_preload_config",
        ":vite_renderer_config",
        "//:node_modules",
        "//:package_json",
        "//client:client_src",
        "//proto:index",
        "//server:server_ts",
    ],
    outs = ["start.sh"],
    cmd = """
        cat > $@ << 'EOF'
#!/usr/bin/env bash
set -euo pipefail

# Get the real workspace directory (not the Bazel execroot)
# When running through Bazel, BUILD_WORKSPACE_DIRECTORY is set
if [[ -n "$${BUILD_WORKSPACE_DIRECTORY:-}" ]]; then
    WORKSPACE_ROOT="$$BUILD_WORKSPACE_DIRECTORY"
else
    # Fallback: find workspace by looking for MODULE.bazel
    SCRIPT_DIR="$$(cd "$$(dirname "$${BASH_SOURCE[0]}")" && pwd)"
    WORKSPACE_ROOT="$$SCRIPT_DIR"

    while [[ "$$WORKSPACE_ROOT" != "/" ]]; do
        if [[ -f "$$WORKSPACE_ROOT/MODULE.bazel" ]] && [[ -f "$$WORKSPACE_ROOT/package.json" ]]; then
            break
        fi
        WORKSPACE_ROOT="$$(dirname "$$WORKSPACE_ROOT")"
    done

    if [[ ! -f "$$WORKSPACE_ROOT/MODULE.bazel" ]]; then
        echo "Error: Could not find workspace root" >&2
        exit 1
    fi
fi

cd "$$WORKSPACE_ROOT"

# Run Electron Forge start
exec node_modules/.bin/electron-forge start
EOF
        chmod +x $@
    """,
    executable = True,
    local = True,
    tags = ["no-sandbox"],
)

# Development with iBazel - run with: bazel run //electron:dev
# This uses iBazel to watch and rebuild, then runs Electron Forge
genrule(
    name = "dev",
    srcs = [
        "dev-bazel.sh",
        ":main_js",
        ":preload_js",
        ":package_json",
        ":forge_config",
        ":vite_main_config",
        ":vite_preload_config",
        ":vite_renderer_config",
        "//:node_modules",
        "//:package_json",
        "//client:client_src",
        "//proto:index",
        "//server:server_ts",
    ],
    outs = ["dev.sh.exe"],
    cmd = """
        cp $(location dev-bazel.sh) $@
        chmod +x $@
    """,
    executable = True,
    local = True,
    tags = ["no-sandbox"],
)
