load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("@aspect_rules_ts//ts:proto.bzl", "ts_proto_library")
load("@aspect_rules_js//js:defs.bzl", "js_library")

npm_link_all_packages(name = "node_modules")



# Bazel build.proto and dependencies
# Bazel build.proto and stardoc_output.proto
proto_library(
    name = "build_proto",
    srcs = [
        "build.proto",
        "stardoc_output.proto",
    ],
    strip_import_prefix = "/proto",
    deps = [
        "@com_google_protobuf//:any_proto",
        "@com_google_protobuf//:timestamp_proto",
    ],
    visibility = ["//visibility:public"],
)

# TypeScript bindings for build.proto
ts_proto_library(
    name = "build_ts_proto",
    copy_files = False,
    node_modules = "//:node_modules",
    proto = ":build_proto",
    protoc_gen_options = {
        "import_extension": ".js",
    },
    visibility = ["//visibility:public"],
)



# Define the proto library
proto_library(
    name = "gazel_proto",
    srcs = ["gazel.proto"],
    visibility = ["//visibility:public"],
    deps = [
       "@com_google_protobuf//:any_proto",
       "@com_google_protobuf//:timestamp_proto",
       ":build_proto",
    ],
)
proto_library(
    name = "logging_proto",
    srcs = ["logging.proto"],
    visibility = ["//visibility:public"],
    deps = [
       "@com_google_protobuf//:any_proto",
       "@com_google_protobuf//:timestamp_proto",
    ],
)

ts_proto_library(
    name = "gazel_ts_proto",
    proto = ":gazel_proto",
    copy_files = False,
    node_modules = "//:node_modules",
    protoc_gen_options = {
        "import_extension": ".js",
    },
    visibility = ["//visibility:public"],
)

ts_proto_library(
    name = "logging_ts_proto",
    proto = ":logging_proto",
    copy_files = False,
    node_modules = "//:node_modules",
    visibility = ["//visibility:public"],
    protoc_gen_options = {
        "import_extension": ".js",
    },
)
# Demonstrate that transitive tsconfig extends clauses work
ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    deps = [
        "tsconfig.json",
        "//:tsconfig",
    ],
)





ts_project(
    name = "index",
    srcs = ["index.ts"],
    tsconfig = ":tsconfig",
    allow_js=True,
    declaration_map = True,
    declaration = True,
    source_map = True,
    no_emit = False,
    deps = [
        ":logging_ts_proto",
        ":gazel_ts_proto",
        ":build_ts_proto",
        "//:tsconfig",
    ],
    visibility = ["//visibility:public"],
)



js_library(
    name = "pkg",
    srcs = [
        "package.json",
        ":index",
        ":build_ts_proto",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":index",
        ":logging_ts_proto",
        ":gazel_ts_proto",
        ":build_ts_proto",
    ],
)
