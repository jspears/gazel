// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,import_extension=js"
// @generated from file gazel.proto (package gazel.api.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Rule } from "./build_pb.js";
import { file_build } from "./build_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file gazel.proto.
 */
export const file_gazel: GenFile = /*@__PURE__*/
  fileDesc("CgtnYXplbC5wcm90bxIMZ2F6ZWwuYXBpLnYxIqABCg1Xb3Jrc3BhY2VJbmZvEgwKBHBhdGgYASABKAkSDAoEbmFtZRgCIAEoCRINCgV2YWxpZBgDIAEoCBINCgVlcnJvchgEIAEoCRIQCghwYWNrYWdlcxgFIAMoCRIUCgx0YXJnZXRfY291bnQYBiABKAUSEgoKZmlsZV9jb3VudBgHIAEoBRIZChF3b3Jrc3BhY2VfdmVyc2lvbhgIIAEoCSKUAgoJQmF6ZWxJbmZvEg8KB3ZlcnNpb24YASABKAkSDwoHcmVsZWFzZRgCIAEoCRIRCgl3b3Jrc3BhY2UYAyABKAkSFgoOZXhlY3V0aW9uX3Jvb3QYBCABKAkSEwoLb3V0cHV0X2Jhc2UYBSABKAkSEwoLb3V0cHV0X3BhdGgYBiABKAkSEgoKc2VydmVyX3BpZBgHIAEoCRISCgpzZXJ2ZXJfbG9nGAggASgJEhMKC2NvbW1hbmRfbG9nGAkgASgJEh8KF3VzZWRfaGVhcF9zaXplX2FmdGVyX2djGAogASgIEhUKDW1heF9oZWFwX3NpemUYCyABKAkSGwoTY29tbWl0dGVkX2hlYXBfc2l6ZRgMIAEoCSKuAgoOQmF6ZWxBdHRyaWJ1dGUSDAoEbmFtZRgBIAEoCRIMCgR0eXBlGAIgASgJEhkKDHN0cmluZ192YWx1ZRgDIAEoCUgAiAEBEhkKEXN0cmluZ19saXN0X3ZhbHVlGAQgAygJEhYKCWludF92YWx1ZRgFIAEoA0gBiAEBEhoKDWJvb2xlYW5fdmFsdWUYBiABKAhIAogBARI4ChFzdHJpbmdfZGljdF92YWx1ZRgHIAMoCzIdLmdhemVsLmFwaS52MS5TdHJpbmdEaWN0RW50cnkSHAoUZXhwbGljaXRseV9zcGVjaWZpZWQYCCABKAgSDQoFbm9kZXAYCSABKAhCDwoNX3N0cmluZ192YWx1ZUIMCgpfaW50X3ZhbHVlQhAKDl9ib29sZWFuX3ZhbHVlIi0KD1N0cmluZ0RpY3RFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAki3QEKC0JhemVsVGFyZ2V0Eg0KBWxhYmVsGAEgASgJEgwKBGtpbmQYAiABKAkSDwoHcGFja2FnZRgDIAEoCRIMCgRuYW1lGAQgASgJEgwKBHRhZ3MYBSADKAkSDAoEZGVwcxgGIAMoCRIMCgRzcmNzGAcgAygJEjAKCmF0dHJpYnV0ZXMYCCADKAsyHC5nYXplbC5hcGkudjEuQmF6ZWxBdHRyaWJ1dGUSEgoKdmlzaWJpbGl0eRgJIAEoCRIQCgh0ZXN0b25seRgKIAEoCBIQCghsb2NhdGlvbhgLIAEoCSKxAQoJQnVpbGRGaWxlEgwKBHBhdGgYASABKAkSDwoHcGFja2FnZRgCIAEoCRIqCgd0YXJnZXRzGAMgAygLMhkuZ2F6ZWwuYXBpLnYxLkJhemVsVGFyZ2V0EhIKCmxpbmVfY291bnQYBCABKAUSEgoKc2l6ZV9ieXRlcxgFIAEoAxIxCg1tb2RpZmllZF90aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCKhAQoNUXVlcnlUZW1wbGF0ZRIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEhAKCHRlbXBsYXRlGAQgASgJEhIKCnBhcmFtZXRlcnMYBSADKAkSEAoIY2F0ZWdvcnkYBiABKAkSEgoKcXVlcnlfdHlwZRgHIAEoCRIVCg1vdXRwdXRfZm9ybWF0GAggASgJIqoBCgpTYXZlZFF1ZXJ5EgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSDQoFcXVlcnkYAyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkSLgoKY3JlYXRlZF9hdBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKdXBkYXRlZF9hdBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAisQEKDkNvbW1hbmRIaXN0b3J5EgoKAmlkGAEgASgJEg8KB2NvbW1hbmQYAiABKAkSDAoEYXJncxgDIAMoCRIPCgdzdWNjZXNzGAQgASgIEg4KBm91dHB1dBgFIAEoCRINCgVlcnJvchgGIAEoCRIvCgtleGVjdXRlZF9hdBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoLZHVyYXRpb25fbXMYCCABKAMitAMKBk1vZHVsZRILCgNrZXkYASABKAkSDAoEbmFtZRgCIAEoCRIPCgd2ZXJzaW9uGAMgASgJEigKCGxvY2F0aW9uGAQgASgLMhYuZ2F6ZWwuYXBpLnYxLkxvY2F0aW9uEhsKE2NvbXBhdGliaWxpdHlfbGV2ZWwYBSABKAUSEQoJcmVwb19uYW1lGAYgASgJEhsKE2JhemVsX2NvbXBhdGliaWxpdHkYByADKAkSJQodbW9kdWxlX3J1bGVfZXhwb3J0c19hbGxfcnVsZXMYCCABKAgSDAoEdGFncxgJIAMoCRIuCgxkZXBlbmRlbmNpZXMYCiADKAsyGC5nYXplbC5hcGkudjEuRGVwZW5kZW5jeRI3ChVyZXNvbHZlZF9kZXBlbmRlbmNpZXMYCyADKAsyGC5nYXplbC5hcGkudjEuRGVwZW5kZW5jeRI2ChBleHRlbnNpb25fdXNhZ2VzGAwgAygLMhwuZ2F6ZWwuYXBpLnYxLkV4dGVuc2lvblVzYWdlEhgKEGRlcGVuZGVuY3lfY291bnQYDSABKAUSFwoPZXh0ZW5zaW9uX2NvdW50GA4gASgFIjYKCExvY2F0aW9uEgwKBGZpbGUYASABKAkSDAoEbGluZRgCIAEoBRIOCgZjb2x1bW4YAyABKAUiYgoKRGVwZW5kZW5jeRILCgNrZXkYASABKAkSDAoEbmFtZRgCIAEoCRIPCgd2ZXJzaW9uGAMgASgJEhYKDmRldl9kZXBlbmRlbmN5GAQgASgIEhAKCHJlZ2lzdHJ5GAUgASgJIoMCCg5FeHRlbnNpb25Vc2FnZRIaChJleHRlbnNpb25fYnpsX2ZpbGUYASABKAkSFgoOZXh0ZW5zaW9uX25hbWUYAiABKAkSKAoIbG9jYXRpb24YAyABKAsyFi5nYXplbC5hcGkudjEuTG9jYXRpb24SOgoHaW1wb3J0cxgEIAMoCzIpLmdhemVsLmFwaS52MS5FeHRlbnNpb25Vc2FnZS5JbXBvcnRzRW50cnkSFgoOZGV2X2RlcGVuZGVuY3kYBSABKAgSDwoHaXNvbGF0ZRgGIAEoCBouCgxJbXBvcnRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJLChBNb2R1bGVEZXBlbmRlbmN5EgwKBGZyb20YASABKAkSCgoCdG8YAiABKAkSDAoEdHlwZRgDIAEoCRIPCgd2ZXJzaW9uGAQgASgJIhkKF0dldFdvcmtzcGFjZUluZm9SZXF1ZXN0IkUKGEdldFdvcmtzcGFjZUluZm9SZXNwb25zZRIpCgRpbmZvGAEgASgLMhsuZ2F6ZWwuYXBpLnYxLldvcmtzcGFjZUluZm8iHAoaR2V0Q3VycmVudFdvcmtzcGFjZVJlcXVlc3QiYgobR2V0Q3VycmVudFdvcmtzcGFjZVJlc3BvbnNlEhIKCmNvbmZpZ3VyZWQYASABKAgSEQoJd29ya3NwYWNlGAIgASgJEg0KBXZhbGlkGAMgASgIEg0KBWVycm9yGAQgASgJIhcKFVNjYW5Xb3Jrc3BhY2VzUmVxdWVzdCKTAQoWU2NhbldvcmtzcGFjZXNSZXNwb25zZRJCCgp3b3Jrc3BhY2VzGAEgAygLMi4uZ2F6ZWwuYXBpLnYxLlNjYW5Xb3Jrc3BhY2VzUmVzcG9uc2UuV29ya3NwYWNlGjUKCVdvcmtzcGFjZRIMCgRwYXRoGAEgASgJEgwKBG5hbWUYAiABKAkSDAoEdHlwZRgDIAEoCSIrChZTd2l0Y2hXb3Jrc3BhY2VSZXF1ZXN0EhEKCXdvcmtzcGFjZRgBIAEoCSJOChdTd2l0Y2hXb3Jrc3BhY2VSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEhEKCXdvcmtzcGFjZRgCIAEoCRIPCgdtZXNzYWdlGAMgASgJIhoKGEdldFdvcmtzcGFjZUZpbGVzUmVxdWVzdCLEAQoZR2V0V29ya3NwYWNlRmlsZXNSZXNwb25zZRJECgVmaWxlcxgBIAMoCzI1LmdhemVsLmFwaS52MS5HZXRXb3Jrc3BhY2VGaWxlc1Jlc3BvbnNlLldvcmtzcGFjZUZpbGUaYQoNV29ya3NwYWNlRmlsZRIMCgRwYXRoGAEgASgJEgwKBG5hbWUYAiABKAkSDAoEdHlwZRgDIAEoCRIPCgd0YXJnZXRzGAQgASgFEhUKDWxhc3RfbW9kaWZpZWQYBSABKAMiFQoTR2V0QmF6ZWxJbmZvUmVxdWVzdCI9ChRHZXRCYXplbEluZm9SZXNwb25zZRIlCgRpbmZvGAEgASgLMhcuZ2F6ZWwuYXBpLnYxLkJhemVsSW5mbyI1ChJMaXN0VGFyZ2V0c1JlcXVlc3QSDwoHcGF0dGVybhgBIAEoCRIOCgZmb3JtYXQYAiABKAkikgEKE0xpc3RUYXJnZXRzUmVzcG9uc2USKwoGdGFyZ2V0GAEgASgLMhkuZ2F6ZWwuYXBpLnYxLkJhemVsVGFyZ2V0SAASNQoIY29tcGxldGUYAiABKAsyIS5nYXplbC5hcGkudjEuTGlzdFRhcmdldHNDb21wbGV0ZUgAEg8KBWVycm9yGAMgASgJSABCBgoEZGF0YSIkChNMaXN0VGFyZ2V0c0NvbXBsZXRlEg0KBXRvdGFsGAEgASgFIjgKClRhcmdldExpc3QSKgoHdGFyZ2V0cxgBIAMoCzIZLmdhemVsLmFwaS52MS5CYXplbFRhcmdldCIiChBHZXRUYXJnZXRSZXF1ZXN0Eg4KBnRhcmdldBgBIAEoCSI+ChFHZXRUYXJnZXRSZXNwb25zZRIpCgZ0YXJnZXQYASABKAsyGS5nYXplbC5hcGkudjEuQmF6ZWxUYXJnZXQiPQocR2V0VGFyZ2V0RGVwZW5kZW5jaWVzUmVxdWVzdBIOCgZ0YXJnZXQYASABKAkSDQoFZGVwdGgYAiABKAUifgodR2V0VGFyZ2V0RGVwZW5kZW5jaWVzUmVzcG9uc2USDgoGdGFyZ2V0GAEgASgJEg0KBWRlcHRoGAIgASgFEg0KBXRvdGFsGAMgASgFEi8KDGRlcGVuZGVuY2llcxgEIAMoCzIZLmdhemVsLmFwaS52MS5CYXplbFRhcmdldCIpChdHZXRUYXJnZXRPdXRwdXRzUmVxdWVzdBIOCgZ0YXJnZXQYASABKAkiSgoYR2V0VGFyZ2V0T3V0cHV0c1Jlc3BvbnNlEg4KBnRhcmdldBgBIAEoCRIPCgdvdXRwdXRzGAIgAygJEg0KBWNvdW50GAMgASgFIi8KHUdldFJldmVyc2VEZXBlbmRlbmNpZXNSZXF1ZXN0Eg4KBnRhcmdldBgBIAEoCSJwCh5HZXRSZXZlcnNlRGVwZW5kZW5jaWVzUmVzcG9uc2USDgoGdGFyZ2V0GAEgASgJEg0KBXRvdGFsGAIgASgFEi8KDGRlcGVuZGVuY2llcxgDIAMoCzIZLmdhemVsLmFwaS52MS5CYXplbFRhcmdldCJFChlHZXRPdXRwdXRDb25zdW1lcnNSZXF1ZXN0Eg4KBm91dHB1dBgBIAEoCRIYChBwcm9kdWNpbmdfdGFyZ2V0GAIgASgJImkKGkdldE91dHB1dENvbnN1bWVyc1Jlc3BvbnNlEg4KBm91dHB1dBgBIAEoCRINCgV0b3RhbBgCIAEoBRIsCgljb25zdW1lcnMYAyADKAsyGS5nYXplbC5hcGkudjEuQmF6ZWxUYXJnZXQiRAoUU2VhcmNoVGFyZ2V0c1JlcXVlc3QSDQoFcXVlcnkYASABKAkSDAoEdHlwZRgCIAEoCRIPCgdwYWNrYWdlGAMgASgJIpYBChVTZWFyY2hUYXJnZXRzUmVzcG9uc2USKwoGdGFyZ2V0GAEgASgLMhkuZ2F6ZWwuYXBpLnYxLkJhemVsVGFyZ2V0SAASNwoIY29tcGxldGUYAiABKAsyIy5nYXplbC5hcGkudjEuU2VhcmNoVGFyZ2V0c0NvbXBsZXRlSAASDwoFZXJyb3IYAyABKAlIAEIGCgRkYXRhIjUKFVNlYXJjaFRhcmdldHNDb21wbGV0ZRINCgVxdWVyeRgBIAEoCRINCgV0b3RhbBgCIAEoBSJPChNFeGVjdXRlUXVlcnlSZXF1ZXN0Eg0KBXF1ZXJ5GAEgASgJEhUKDW91dHB1dF9mb3JtYXQYAiABKAkSEgoKcXVlcnlfdHlwZRgDIAEoCSJ0ChRFeGVjdXRlUXVlcnlSZXNwb25zZRINCgVxdWVyeRgBIAEoCRIVCg1vdXRwdXRfZm9ybWF0GAIgASgJEikKBnJlc3VsdBgDIAEoCzIZLmdhemVsLmFwaS52MS5RdWVyeVJlc3VsdBILCgNyYXcYBCABKAkiOQoLUXVlcnlSZXN1bHQSKgoHdGFyZ2V0cxgBIAMoCzIZLmdhemVsLmFwaS52MS5CYXplbFRhcmdldCJhChJTdHJlYW1RdWVyeVJlcXVlc3QSDQoFcXVlcnkYASABKAkSFQoNb3V0cHV0X2Zvcm1hdBgCIAEoCRIRCglwYXJzZV94bWwYAyABKAgSEgoKcXVlcnlfdHlwZRgEIAEoCSJvChNTdHJlYW1RdWVyeVJlc3BvbnNlEisKBnRhcmdldBgBIAEoCzIZLmdhemVsLmFwaS52MS5CYXplbFRhcmdldEgAEhIKCHJhd19saW5lGAIgASgJSAASDwoFZXJyb3IYAyABKAlIAEIGCgRkYXRhIkYKEkJ1aWxkVGFyZ2V0UmVxdWVzdBIOCgZ0YXJnZXQYASABKAkSDwoHb3B0aW9ucxgCIAMoCRIPCgdjb21tYW5kGAMgASgJIlUKE0J1aWxkVGFyZ2V0UmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIOCgZvdXRwdXQYAiABKAkSDgoGc3RkZXJyGAMgASgJEg0KBWVycm9yGAQgASgJIjUKElN0cmVhbUJ1aWxkUmVxdWVzdBIOCgZ0YXJnZXQYASABKAkSDwoHb3B0aW9ucxgCIAMoCSKjAQoTU3RyZWFtQnVpbGRSZXNwb25zZRIQCgZvdXRwdXQYASABKAlIABIPCgVlcnJvchgCIAEoCUgAEi8KCHByb2dyZXNzGAMgASgLMhsuZ2F6ZWwuYXBpLnYxLkJ1aWxkUHJvZ3Jlc3NIABIvCghjb21wbGV0ZRgEIAEoCzIbLmdhemVsLmFwaS52MS5CdWlsZENvbXBsZXRlSABCBwoFZXZlbnQiWQoNQnVpbGRQcm9ncmVzcxIZChFhY3Rpb25zX2NvbXBsZXRlZBgBIAEoBRIVCg1hY3Rpb25zX3RvdGFsGAIgASgFEhYKDmN1cnJlbnRfYWN0aW9uGAMgASgJIkgKDUJ1aWxkQ29tcGxldGUSDwoHc3VjY2VzcxgBIAEoCBIRCglleGl0X2NvZGUYAiABKAUSEwoLZHVyYXRpb25fbXMYAyABKAMiFwoVR2V0TW9kdWxlR3JhcGhSZXF1ZXN0IrcBChZHZXRNb2R1bGVHcmFwaFJlc3BvbnNlEgwKBHJvb3QYASABKAkSJQoHbW9kdWxlcxgCIAMoCzIULmdhemVsLmFwaS52MS5Nb2R1bGUSNAoMZGVwZW5kZW5jaWVzGAMgAygLMh4uZ2F6ZWwuYXBpLnYxLk1vZHVsZURlcGVuZGVuY3kSMgoKc3RhdGlzdGljcxgEIAEoCzIeLmdhemVsLmFwaS52MS5Nb2R1bGVTdGF0aXN0aWNzIn8KEE1vZHVsZVN0YXRpc3RpY3MSFQoNdG90YWxfbW9kdWxlcxgBIAEoBRIbChNkaXJlY3RfZGVwZW5kZW5jaWVzGAIgASgFEhgKEGRldl9kZXBlbmRlbmNpZXMYAyABKAUSHQoVaW5kaXJlY3RfZGVwZW5kZW5jaWVzGAQgASgFIisKFEdldE1vZHVsZUluZm9SZXF1ZXN0EhMKC21vZHVsZV9uYW1lGAEgASgJIj0KFUdldE1vZHVsZUluZm9SZXNwb25zZRIkCgZtb2R1bGUYASABKAsyFC5nYXplbC5hcGkudjEuTW9kdWxlIisKGEdldE1vZHVsZUdyYXBoRG90UmVxdWVzdBIPCgdvcHRpb25zGAEgAygJIigKGUdldE1vZHVsZUdyYXBoRG90UmVzcG9uc2USCwoDZG90GAEgASgJIhoKGEdldFF1ZXJ5VGVtcGxhdGVzUmVxdWVzdCJLChlHZXRRdWVyeVRlbXBsYXRlc1Jlc3BvbnNlEi4KCXRlbXBsYXRlcxgBIAMoCzIbLmdhemVsLmFwaS52MS5RdWVyeVRlbXBsYXRlIhgKFkdldFNhdmVkUXVlcmllc1JlcXVlc3QiRAoXR2V0U2F2ZWRRdWVyaWVzUmVzcG9uc2USKQoHcXVlcmllcxgBIAMoCzIYLmdhemVsLmFwaS52MS5TYXZlZFF1ZXJ5IkQKEFNhdmVRdWVyeVJlcXVlc3QSDAoEbmFtZRgBIAEoCRINCgVxdWVyeRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCSI8ChFTYXZlUXVlcnlSZXNwb25zZRInCgVxdWVyeRgBIAEoCzIYLmdhemVsLmFwaS52MS5TYXZlZFF1ZXJ5IiAKEkRlbGV0ZVF1ZXJ5UmVxdWVzdBIKCgJpZBgBIAEoCSImChNEZWxldGVRdWVyeVJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgiMwoQU3RyZWFtUnVuUmVxdWVzdBIOCgZ0YXJnZXQYASABKAkSDwoHb3B0aW9ucxgCIAMoCSKdAQoRU3RyZWFtUnVuUmVzcG9uc2USEAoGb3V0cHV0GAEgASgJSAASDwoFZXJyb3IYAiABKAlIABItCghwcm9ncmVzcxgDIAEoCzIZLmdhemVsLmFwaS52MS5SdW5Qcm9ncmVzc0gAEi0KCGNvbXBsZXRlGAQgASgLMhkuZ2F6ZWwuYXBpLnYxLlJ1bkNvbXBsZXRlSABCBwoFZXZlbnQiJQoLUnVuUHJvZ3Jlc3MSFgoOY3VycmVudF9hY3Rpb24YASABKAkiRgoLUnVuQ29tcGxldGUSDwoHc3VjY2VzcxgBIAEoCBIRCglleGl0X2NvZGUYAiABKAUSEwoLZHVyYXRpb25fbXMYAyABKAMiIwoTR2V0QnVpbGRGaWxlUmVxdWVzdBIMCgRwYXRoGAEgASgJInQKFEdldEJ1aWxkRmlsZVJlc3BvbnNlEgwKBHBhdGgYASABKAkSDwoHY29udGVudBgCIAEoCRIuCgd0YXJnZXRzGAMgAygLMh0uZ2F6ZWwuYXBpLnYxLkJ1aWxkRmlsZVRhcmdldBINCgVsaW5lcxgEIAEoBSJACg9CdWlsZEZpbGVUYXJnZXQSEQoJcnVsZV90eXBlGAEgASgJEgwKBG5hbWUYAiABKAkSDAoEbGluZRgDIAEoBSIlChVHZXRSdWxlc0J5RmlsZVJlcXVlc3QSDAoEZmlsZRgBIAEoCSJIChZHZXRSdWxlc0J5RmlsZVJlc3BvbnNlEgwKBGZpbGUYASABKAkSIAoFcnVsZXMYAiADKAsyES5ibGF6ZV9xdWVyeS5SdWxlIj0KFFNlYXJjaEluRmlsZXNSZXF1ZXN0Eg0KBXF1ZXJ5GAEgASgJEhYKDmNhc2Vfc2Vuc2l0aXZlGAIgASgIInoKFVNlYXJjaEluRmlsZXNSZXNwb25zZRINCgVxdWVyeRgBIAEoCRIWCg5jYXNlX3NlbnNpdGl2ZRgCIAEoCBINCgV0b3RhbBgDIAEoBRIrCgdyZXN1bHRzGAQgAygLMhouZ2F6ZWwuYXBpLnYxLlNlYXJjaFJlc3VsdCI7CgxTZWFyY2hSZXN1bHQSDAoEZmlsZRgBIAEoCRIMCgRsaW5lGAIgASgFEg8KB2NvbnRlbnQYAyABKAkiKQoYR2V0Q29tbWFuZEhpc3RvcnlSZXF1ZXN0Eg0KBWxpbWl0GAEgASgFIk4KGUdldENvbW1hbmRIaXN0b3J5UmVzcG9uc2USMQoHaGlzdG9yeRgBIAMoCzIgLmdhemVsLmFwaS52MS5Db21tYW5kSGlzdG9yeUl0ZW0iqgEKEkNvbW1hbmRIaXN0b3J5SXRlbRIKCgJpZBgBIAEoCRIPCgdjb21tYW5kGAIgASgJEg4KBnRhcmdldBgDIAEoCRIPCgdvcHRpb25zGAQgAygJEhEKCXRpbWVzdGFtcBgFIAEoAxIPCgdzdWNjZXNzGAYgASgIEg4KBm91dHB1dBgHIAEoCRINCgVlcnJvchgIIAEoCRITCgtkdXJhdGlvbl9tcxgJIAEoBSIyChxVcGRhdGVCYXplbEV4ZWN1dGFibGVSZXF1ZXN0EhIKCmV4ZWN1dGFibGUYASABKAkiWAodVXBkYXRlQmF6ZWxFeGVjdXRhYmxlUmVzcG9uc2USDwoHc3VjY2VzcxgBIAEoCBIPCgdtZXNzYWdlGAIgASgJEhUKDWRldGVjdGVkX3BhdGgYAyABKAkynBYKDEdhemVsU2VydmljZRJhChBHZXRXb3Jrc3BhY2VJbmZvEiUuZ2F6ZWwuYXBpLnYxLkdldFdvcmtzcGFjZUluZm9SZXF1ZXN0GiYuZ2F6ZWwuYXBpLnYxLkdldFdvcmtzcGFjZUluZm9SZXNwb25zZRJqChNHZXRDdXJyZW50V29ya3NwYWNlEiguZ2F6ZWwuYXBpLnYxLkdldEN1cnJlbnRXb3Jrc3BhY2VSZXF1ZXN0GikuZ2F6ZWwuYXBpLnYxLkdldEN1cnJlbnRXb3Jrc3BhY2VSZXNwb25zZRJbCg5TY2FuV29ya3NwYWNlcxIjLmdhemVsLmFwaS52MS5TY2FuV29ya3NwYWNlc1JlcXVlc3QaJC5nYXplbC5hcGkudjEuU2NhbldvcmtzcGFjZXNSZXNwb25zZRJeCg9Td2l0Y2hXb3Jrc3BhY2USJC5nYXplbC5hcGkudjEuU3dpdGNoV29ya3NwYWNlUmVxdWVzdBolLmdhemVsLmFwaS52MS5Td2l0Y2hXb3Jrc3BhY2VSZXNwb25zZRJkChFHZXRXb3Jrc3BhY2VGaWxlcxImLmdhemVsLmFwaS52MS5HZXRXb3Jrc3BhY2VGaWxlc1JlcXVlc3QaJy5nYXplbC5hcGkudjEuR2V0V29ya3NwYWNlRmlsZXNSZXNwb25zZRJVCgxHZXRCYXplbEluZm8SIS5nYXplbC5hcGkudjEuR2V0QmF6ZWxJbmZvUmVxdWVzdBoiLmdhemVsLmFwaS52MS5HZXRCYXplbEluZm9SZXNwb25zZRJUCgtMaXN0VGFyZ2V0cxIgLmdhemVsLmFwaS52MS5MaXN0VGFyZ2V0c1JlcXVlc3QaIS5nYXplbC5hcGkudjEuTGlzdFRhcmdldHNSZXNwb25zZTABEkwKCUdldFRhcmdldBIeLmdhemVsLmFwaS52MS5HZXRUYXJnZXRSZXF1ZXN0Gh8uZ2F6ZWwuYXBpLnYxLkdldFRhcmdldFJlc3BvbnNlEnAKFUdldFRhcmdldERlcGVuZGVuY2llcxIqLmdhemVsLmFwaS52MS5HZXRUYXJnZXREZXBlbmRlbmNpZXNSZXF1ZXN0GisuZ2F6ZWwuYXBpLnYxLkdldFRhcmdldERlcGVuZGVuY2llc1Jlc3BvbnNlEmEKEEdldFRhcmdldE91dHB1dHMSJS5nYXplbC5hcGkudjEuR2V0VGFyZ2V0T3V0cHV0c1JlcXVlc3QaJi5nYXplbC5hcGkudjEuR2V0VGFyZ2V0T3V0cHV0c1Jlc3BvbnNlEnMKFkdldFJldmVyc2VEZXBlbmRlbmNpZXMSKy5nYXplbC5hcGkudjEuR2V0UmV2ZXJzZURlcGVuZGVuY2llc1JlcXVlc3QaLC5nYXplbC5hcGkudjEuR2V0UmV2ZXJzZURlcGVuZGVuY2llc1Jlc3BvbnNlEmcKEkdldE91dHB1dENvbnN1bWVycxInLmdhemVsLmFwaS52MS5HZXRPdXRwdXRDb25zdW1lcnNSZXF1ZXN0GiguZ2F6ZWwuYXBpLnYxLkdldE91dHB1dENvbnN1bWVyc1Jlc3BvbnNlEloKDVNlYXJjaFRhcmdldHMSIi5nYXplbC5hcGkudjEuU2VhcmNoVGFyZ2V0c1JlcXVlc3QaIy5nYXplbC5hcGkudjEuU2VhcmNoVGFyZ2V0c1Jlc3BvbnNlMAESVQoMRXhlY3V0ZVF1ZXJ5EiEuZ2F6ZWwuYXBpLnYxLkV4ZWN1dGVRdWVyeVJlcXVlc3QaIi5nYXplbC5hcGkudjEuRXhlY3V0ZVF1ZXJ5UmVzcG9uc2USVAoLU3RyZWFtUXVlcnkSIC5nYXplbC5hcGkudjEuU3RyZWFtUXVlcnlSZXF1ZXN0GiEuZ2F6ZWwuYXBpLnYxLlN0cmVhbVF1ZXJ5UmVzcG9uc2UwARJkChFHZXRRdWVyeVRlbXBsYXRlcxImLmdhemVsLmFwaS52MS5HZXRRdWVyeVRlbXBsYXRlc1JlcXVlc3QaJy5nYXplbC5hcGkudjEuR2V0UXVlcnlUZW1wbGF0ZXNSZXNwb25zZRJeCg9HZXRTYXZlZFF1ZXJpZXMSJC5nYXplbC5hcGkudjEuR2V0U2F2ZWRRdWVyaWVzUmVxdWVzdBolLmdhemVsLmFwaS52MS5HZXRTYXZlZFF1ZXJpZXNSZXNwb25zZRJMCglTYXZlUXVlcnkSHi5nYXplbC5hcGkudjEuU2F2ZVF1ZXJ5UmVxdWVzdBofLmdhemVsLmFwaS52MS5TYXZlUXVlcnlSZXNwb25zZRJSCgtEZWxldGVRdWVyeRIgLmdhemVsLmFwaS52MS5EZWxldGVRdWVyeVJlcXVlc3QaIS5nYXplbC5hcGkudjEuRGVsZXRlUXVlcnlSZXNwb25zZRJSCgtCdWlsZFRhcmdldBIgLmdhemVsLmFwaS52MS5CdWlsZFRhcmdldFJlcXVlc3QaIS5nYXplbC5hcGkudjEuQnVpbGRUYXJnZXRSZXNwb25zZRJUCgtTdHJlYW1CdWlsZBIgLmdhemVsLmFwaS52MS5TdHJlYW1CdWlsZFJlcXVlc3QaIS5nYXplbC5hcGkudjEuU3RyZWFtQnVpbGRSZXNwb25zZTABEk4KCVN0cmVhbVJ1bhIeLmdhemVsLmFwaS52MS5TdHJlYW1SdW5SZXF1ZXN0Gh8uZ2F6ZWwuYXBpLnYxLlN0cmVhbVJ1blJlc3BvbnNlMAESWwoOR2V0TW9kdWxlR3JhcGgSIy5nYXplbC5hcGkudjEuR2V0TW9kdWxlR3JhcGhSZXF1ZXN0GiQuZ2F6ZWwuYXBpLnYxLkdldE1vZHVsZUdyYXBoUmVzcG9uc2USWAoNR2V0TW9kdWxlSW5mbxIiLmdhemVsLmFwaS52MS5HZXRNb2R1bGVJbmZvUmVxdWVzdBojLmdhemVsLmFwaS52MS5HZXRNb2R1bGVJbmZvUmVzcG9uc2USZAoRR2V0TW9kdWxlR3JhcGhEb3QSJi5nYXplbC5hcGkudjEuR2V0TW9kdWxlR3JhcGhEb3RSZXF1ZXN0GicuZ2F6ZWwuYXBpLnYxLkdldE1vZHVsZUdyYXBoRG90UmVzcG9uc2USVQoMR2V0QnVpbGRGaWxlEiEuZ2F6ZWwuYXBpLnYxLkdldEJ1aWxkRmlsZVJlcXVlc3QaIi5nYXplbC5hcGkudjEuR2V0QnVpbGRGaWxlUmVzcG9uc2USWwoOR2V0UnVsZXNCeUZpbGUSIy5nYXplbC5hcGkudjEuR2V0UnVsZXNCeUZpbGVSZXF1ZXN0GiQuZ2F6ZWwuYXBpLnYxLkdldFJ1bGVzQnlGaWxlUmVzcG9uc2USWAoNU2VhcmNoSW5GaWxlcxIiLmdhemVsLmFwaS52MS5TZWFyY2hJbkZpbGVzUmVxdWVzdBojLmdhemVsLmFwaS52MS5TZWFyY2hJbkZpbGVzUmVzcG9uc2USZAoRR2V0Q29tbWFuZEhpc3RvcnkSJi5nYXplbC5hcGkudjEuR2V0Q29tbWFuZEhpc3RvcnlSZXF1ZXN0GicuZ2F6ZWwuYXBpLnYxLkdldENvbW1hbmRIaXN0b3J5UmVzcG9uc2UScAoVVXBkYXRlQmF6ZWxFeGVjdXRhYmxlEiouZ2F6ZWwuYXBpLnYxLlVwZGF0ZUJhemVsRXhlY3V0YWJsZVJlcXVlc3QaKy5nYXplbC5hcGkudjEuVXBkYXRlQmF6ZWxFeGVjdXRhYmxlUmVzcG9uc2VCKVonZ2l0aHViLmNvbS9qc3BlYXJzL2dhemVsL2FwaS92MTtnYXplbHYxYgZwcm90bzM", [file_google_protobuf_timestamp, file_build]);

/**
 * @generated from message gazel.api.v1.WorkspaceInfo
 */
export type WorkspaceInfo = Message<"gazel.api.v1.WorkspaceInfo"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: bool valid = 3;
   */
  valid: boolean;

  /**
   * @generated from field: string error = 4;
   */
  error: string;

  /**
   * @generated from field: repeated string packages = 5;
   */
  packages: string[];

  /**
   * @generated from field: int32 target_count = 6;
   */
  targetCount: number;

  /**
   * @generated from field: int32 file_count = 7;
   */
  fileCount: number;

  /**
   * Version from MODULE.bazel or WORKSPACE
   *
   * @generated from field: string workspace_version = 8;
   */
  workspaceVersion: string;
};

/**
 * Describes the message gazel.api.v1.WorkspaceInfo.
 * Use `create(WorkspaceInfoSchema)` to create a new message.
 */
export const WorkspaceInfoSchema: GenMessage<WorkspaceInfo> = /*@__PURE__*/
  messageDesc(file_gazel, 0);

/**
 * @generated from message gazel.api.v1.BazelInfo
 */
export type BazelInfo = Message<"gazel.api.v1.BazelInfo"> & {
  /**
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * @generated from field: string release = 2;
   */
  release: string;

  /**
   * @generated from field: string workspace = 3;
   */
  workspace: string;

  /**
   * @generated from field: string execution_root = 4;
   */
  executionRoot: string;

  /**
   * @generated from field: string output_base = 5;
   */
  outputBase: string;

  /**
   * @generated from field: string output_path = 6;
   */
  outputPath: string;

  /**
   * @generated from field: string server_pid = 7;
   */
  serverPid: string;

  /**
   * @generated from field: string server_log = 8;
   */
  serverLog: string;

  /**
   * @generated from field: string command_log = 9;
   */
  commandLog: string;

  /**
   * @generated from field: bool used_heap_size_after_gc = 10;
   */
  usedHeapSizeAfterGc: boolean;

  /**
   * @generated from field: string max_heap_size = 11;
   */
  maxHeapSize: string;

  /**
   * @generated from field: string committed_heap_size = 12;
   */
  committedHeapSize: string;
};

/**
 * Describes the message gazel.api.v1.BazelInfo.
 * Use `create(BazelInfoSchema)` to create a new message.
 */
export const BazelInfoSchema: GenMessage<BazelInfo> = /*@__PURE__*/
  messageDesc(file_gazel, 1);

/**
 * @generated from message gazel.api.v1.BazelAttribute
 */
export type BazelAttribute = Message<"gazel.api.v1.BazelAttribute"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: optional string string_value = 3;
   */
  stringValue?: string;

  /**
   * @generated from field: repeated string string_list_value = 4;
   */
  stringListValue: string[];

  /**
   * @generated from field: optional int64 int_value = 5;
   */
  intValue?: bigint;

  /**
   * @generated from field: optional bool boolean_value = 6;
   */
  booleanValue?: boolean;

  /**
   * @generated from field: repeated gazel.api.v1.StringDictEntry string_dict_value = 7;
   */
  stringDictValue: StringDictEntry[];

  /**
   * @generated from field: bool explicitly_specified = 8;
   */
  explicitlySpecified: boolean;

  /**
   * @generated from field: bool nodep = 9;
   */
  nodep: boolean;
};

/**
 * Describes the message gazel.api.v1.BazelAttribute.
 * Use `create(BazelAttributeSchema)` to create a new message.
 */
export const BazelAttributeSchema: GenMessage<BazelAttribute> = /*@__PURE__*/
  messageDesc(file_gazel, 2);

/**
 * @generated from message gazel.api.v1.StringDictEntry
 */
export type StringDictEntry = Message<"gazel.api.v1.StringDictEntry"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message gazel.api.v1.StringDictEntry.
 * Use `create(StringDictEntrySchema)` to create a new message.
 */
export const StringDictEntrySchema: GenMessage<StringDictEntry> = /*@__PURE__*/
  messageDesc(file_gazel, 3);

/**
 * @generated from message gazel.api.v1.BazelTarget
 */
export type BazelTarget = Message<"gazel.api.v1.BazelTarget"> & {
  /**
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * @generated from field: string package = 3;
   */
  package: string;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];

  /**
   * @generated from field: repeated string deps = 6;
   */
  deps: string[];

  /**
   * @generated from field: repeated string srcs = 7;
   */
  srcs: string[];

  /**
   * @generated from field: repeated gazel.api.v1.BazelAttribute attributes = 8;
   */
  attributes: BazelAttribute[];

  /**
   * @generated from field: string visibility = 9;
   */
  visibility: string;

  /**
   * @generated from field: bool testonly = 10;
   */
  testonly: boolean;

  /**
   * @generated from field: string location = 11;
   */
  location: string;
};

/**
 * Describes the message gazel.api.v1.BazelTarget.
 * Use `create(BazelTargetSchema)` to create a new message.
 */
export const BazelTargetSchema: GenMessage<BazelTarget> = /*@__PURE__*/
  messageDesc(file_gazel, 4);

/**
 * @generated from message gazel.api.v1.BuildFile
 */
export type BuildFile = Message<"gazel.api.v1.BuildFile"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string package = 2;
   */
  package: string;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 3;
   */
  targets: BazelTarget[];

  /**
   * @generated from field: int32 line_count = 4;
   */
  lineCount: number;

  /**
   * @generated from field: int64 size_bytes = 5;
   */
  sizeBytes: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp modified_time = 6;
   */
  modifiedTime?: Timestamp;
};

/**
 * Describes the message gazel.api.v1.BuildFile.
 * Use `create(BuildFileSchema)` to create a new message.
 */
export const BuildFileSchema: GenMessage<BuildFile> = /*@__PURE__*/
  messageDesc(file_gazel, 5);

/**
 * @generated from message gazel.api.v1.QueryTemplate
 */
export type QueryTemplate = Message<"gazel.api.v1.QueryTemplate"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string template = 4;
   */
  template: string;

  /**
   * @generated from field: repeated string parameters = 5;
   */
  parameters: string[];

  /**
   * @generated from field: string category = 6;
   */
  category: string;

  /**
   * "query", "aquery", or "cquery"
   *
   * @generated from field: string query_type = 7;
   */
  queryType: string;

  /**
   * Recommended output format for this template
   *
   * @generated from field: string output_format = 8;
   */
  outputFormat: string;
};

/**
 * Describes the message gazel.api.v1.QueryTemplate.
 * Use `create(QueryTemplateSchema)` to create a new message.
 */
export const QueryTemplateSchema: GenMessage<QueryTemplate> = /*@__PURE__*/
  messageDesc(file_gazel, 6);

/**
 * @generated from message gazel.api.v1.SavedQuery
 */
export type SavedQuery = Message<"gazel.api.v1.SavedQuery"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string query = 3;
   */
  query: string;

  /**
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;
};

/**
 * Describes the message gazel.api.v1.SavedQuery.
 * Use `create(SavedQuerySchema)` to create a new message.
 */
export const SavedQuerySchema: GenMessage<SavedQuery> = /*@__PURE__*/
  messageDesc(file_gazel, 7);

/**
 * @generated from message gazel.api.v1.CommandHistory
 */
export type CommandHistory = Message<"gazel.api.v1.CommandHistory"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string command = 2;
   */
  command: string;

  /**
   * @generated from field: repeated string args = 3;
   */
  args: string[];

  /**
   * @generated from field: bool success = 4;
   */
  success: boolean;

  /**
   * @generated from field: string output = 5;
   */
  output: string;

  /**
   * @generated from field: string error = 6;
   */
  error: string;

  /**
   * @generated from field: google.protobuf.Timestamp executed_at = 7;
   */
  executedAt?: Timestamp;

  /**
   * @generated from field: int64 duration_ms = 8;
   */
  durationMs: bigint;
};

/**
 * Describes the message gazel.api.v1.CommandHistory.
 * Use `create(CommandHistorySchema)` to create a new message.
 */
export const CommandHistorySchema: GenMessage<CommandHistory> = /*@__PURE__*/
  messageDesc(file_gazel, 8);

/**
 * @generated from message gazel.api.v1.Module
 */
export type Module = Message<"gazel.api.v1.Module"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * @generated from field: gazel.api.v1.Location location = 4;
   */
  location?: Location;

  /**
   * @generated from field: int32 compatibility_level = 5;
   */
  compatibilityLevel: number;

  /**
   * @generated from field: string repo_name = 6;
   */
  repoName: string;

  /**
   * @generated from field: repeated string bazel_compatibility = 7;
   */
  bazelCompatibility: string[];

  /**
   * @generated from field: bool module_rule_exports_all_rules = 8;
   */
  moduleRuleExportsAllRules: boolean;

  /**
   * @generated from field: repeated string tags = 9;
   */
  tags: string[];

  /**
   * @generated from field: repeated gazel.api.v1.Dependency dependencies = 10;
   */
  dependencies: Dependency[];

  /**
   * @generated from field: repeated gazel.api.v1.Dependency resolved_dependencies = 11;
   */
  resolvedDependencies: Dependency[];

  /**
   * @generated from field: repeated gazel.api.v1.ExtensionUsage extension_usages = 12;
   */
  extensionUsages: ExtensionUsage[];

  /**
   * @generated from field: int32 dependency_count = 13;
   */
  dependencyCount: number;

  /**
   * @generated from field: int32 extension_count = 14;
   */
  extensionCount: number;
};

/**
 * Describes the message gazel.api.v1.Module.
 * Use `create(ModuleSchema)` to create a new message.
 */
export const ModuleSchema: GenMessage<Module> = /*@__PURE__*/
  messageDesc(file_gazel, 9);

/**
 * @generated from message gazel.api.v1.Location
 */
export type Location = Message<"gazel.api.v1.Location"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: int32 line = 2;
   */
  line: number;

  /**
   * @generated from field: int32 column = 3;
   */
  column: number;
};

/**
 * Describes the message gazel.api.v1.Location.
 * Use `create(LocationSchema)` to create a new message.
 */
export const LocationSchema: GenMessage<Location> = /*@__PURE__*/
  messageDesc(file_gazel, 10);

/**
 * @generated from message gazel.api.v1.Dependency
 */
export type Dependency = Message<"gazel.api.v1.Dependency"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * @generated from field: bool dev_dependency = 4;
   */
  devDependency: boolean;

  /**
   * @generated from field: string registry = 5;
   */
  registry: string;
};

/**
 * Describes the message gazel.api.v1.Dependency.
 * Use `create(DependencySchema)` to create a new message.
 */
export const DependencySchema: GenMessage<Dependency> = /*@__PURE__*/
  messageDesc(file_gazel, 11);

/**
 * @generated from message gazel.api.v1.ExtensionUsage
 */
export type ExtensionUsage = Message<"gazel.api.v1.ExtensionUsage"> & {
  /**
   * @generated from field: string extension_bzl_file = 1;
   */
  extensionBzlFile: string;

  /**
   * @generated from field: string extension_name = 2;
   */
  extensionName: string;

  /**
   * @generated from field: gazel.api.v1.Location location = 3;
   */
  location?: Location;

  /**
   * @generated from field: map<string, string> imports = 4;
   */
  imports: { [key: string]: string };

  /**
   * @generated from field: bool dev_dependency = 5;
   */
  devDependency: boolean;

  /**
   * @generated from field: bool isolate = 6;
   */
  isolate: boolean;
};

/**
 * Describes the message gazel.api.v1.ExtensionUsage.
 * Use `create(ExtensionUsageSchema)` to create a new message.
 */
export const ExtensionUsageSchema: GenMessage<ExtensionUsage> = /*@__PURE__*/
  messageDesc(file_gazel, 12);

/**
 * @generated from message gazel.api.v1.ModuleDependency
 */
export type ModuleDependency = Message<"gazel.api.v1.ModuleDependency"> & {
  /**
   * @generated from field: string from = 1;
   */
  from: string;

  /**
   * @generated from field: string to = 2;
   */
  to: string;

  /**
   * "direct", "dev", "indirect"
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: string version = 4;
   */
  version: string;
};

/**
 * Describes the message gazel.api.v1.ModuleDependency.
 * Use `create(ModuleDependencySchema)` to create a new message.
 */
export const ModuleDependencySchema: GenMessage<ModuleDependency> = /*@__PURE__*/
  messageDesc(file_gazel, 13);

/**
 * Workspace Service Messages
 *
 * @generated from message gazel.api.v1.GetWorkspaceInfoRequest
 */
export type GetWorkspaceInfoRequest = Message<"gazel.api.v1.GetWorkspaceInfoRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceInfoRequest.
 * Use `create(GetWorkspaceInfoRequestSchema)` to create a new message.
 */
export const GetWorkspaceInfoRequestSchema: GenMessage<GetWorkspaceInfoRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 14);

/**
 * @generated from message gazel.api.v1.GetWorkspaceInfoResponse
 */
export type GetWorkspaceInfoResponse = Message<"gazel.api.v1.GetWorkspaceInfoResponse"> & {
  /**
   * @generated from field: gazel.api.v1.WorkspaceInfo info = 1;
   */
  info?: WorkspaceInfo;
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceInfoResponse.
 * Use `create(GetWorkspaceInfoResponseSchema)` to create a new message.
 */
export const GetWorkspaceInfoResponseSchema: GenMessage<GetWorkspaceInfoResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 15);

/**
 * @generated from message gazel.api.v1.GetCurrentWorkspaceRequest
 */
export type GetCurrentWorkspaceRequest = Message<"gazel.api.v1.GetCurrentWorkspaceRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetCurrentWorkspaceRequest.
 * Use `create(GetCurrentWorkspaceRequestSchema)` to create a new message.
 */
export const GetCurrentWorkspaceRequestSchema: GenMessage<GetCurrentWorkspaceRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 16);

/**
 * @generated from message gazel.api.v1.GetCurrentWorkspaceResponse
 */
export type GetCurrentWorkspaceResponse = Message<"gazel.api.v1.GetCurrentWorkspaceResponse"> & {
  /**
   * @generated from field: bool configured = 1;
   */
  configured: boolean;

  /**
   * @generated from field: string workspace = 2;
   */
  workspace: string;

  /**
   * @generated from field: bool valid = 3;
   */
  valid: boolean;

  /**
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message gazel.api.v1.GetCurrentWorkspaceResponse.
 * Use `create(GetCurrentWorkspaceResponseSchema)` to create a new message.
 */
export const GetCurrentWorkspaceResponseSchema: GenMessage<GetCurrentWorkspaceResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 17);

/**
 * @generated from message gazel.api.v1.ScanWorkspacesRequest
 */
export type ScanWorkspacesRequest = Message<"gazel.api.v1.ScanWorkspacesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesRequest.
 * Use `create(ScanWorkspacesRequestSchema)` to create a new message.
 */
export const ScanWorkspacesRequestSchema: GenMessage<ScanWorkspacesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 18);

/**
 * @generated from message gazel.api.v1.ScanWorkspacesResponse
 */
export type ScanWorkspacesResponse = Message<"gazel.api.v1.ScanWorkspacesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.ScanWorkspacesResponse.Workspace workspaces = 1;
   */
  workspaces: ScanWorkspacesResponse_Workspace[];
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesResponse.
 * Use `create(ScanWorkspacesResponseSchema)` to create a new message.
 */
export const ScanWorkspacesResponseSchema: GenMessage<ScanWorkspacesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 19);

/**
 * @generated from message gazel.api.v1.ScanWorkspacesResponse.Workspace
 */
export type ScanWorkspacesResponse_Workspace = Message<"gazel.api.v1.ScanWorkspacesResponse.Workspace"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * "current", "parent", "home", "discovered"
   *
   * @generated from field: string type = 3;
   */
  type: string;
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesResponse.Workspace.
 * Use `create(ScanWorkspacesResponse_WorkspaceSchema)` to create a new message.
 */
export const ScanWorkspacesResponse_WorkspaceSchema: GenMessage<ScanWorkspacesResponse_Workspace> = /*@__PURE__*/
  messageDesc(file_gazel, 19, 0);

/**
 * @generated from message gazel.api.v1.SwitchWorkspaceRequest
 */
export type SwitchWorkspaceRequest = Message<"gazel.api.v1.SwitchWorkspaceRequest"> & {
  /**
   * @generated from field: string workspace = 1;
   */
  workspace: string;
};

/**
 * Describes the message gazel.api.v1.SwitchWorkspaceRequest.
 * Use `create(SwitchWorkspaceRequestSchema)` to create a new message.
 */
export const SwitchWorkspaceRequestSchema: GenMessage<SwitchWorkspaceRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 20);

/**
 * @generated from message gazel.api.v1.SwitchWorkspaceResponse
 */
export type SwitchWorkspaceResponse = Message<"gazel.api.v1.SwitchWorkspaceResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string workspace = 2;
   */
  workspace: string;

  /**
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message gazel.api.v1.SwitchWorkspaceResponse.
 * Use `create(SwitchWorkspaceResponseSchema)` to create a new message.
 */
export const SwitchWorkspaceResponseSchema: GenMessage<SwitchWorkspaceResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 21);

/**
 * @generated from message gazel.api.v1.GetWorkspaceFilesRequest
 */
export type GetWorkspaceFilesRequest = Message<"gazel.api.v1.GetWorkspaceFilesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceFilesRequest.
 * Use `create(GetWorkspaceFilesRequestSchema)` to create a new message.
 */
export const GetWorkspaceFilesRequestSchema: GenMessage<GetWorkspaceFilesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 22);

/**
 * @generated from message gazel.api.v1.GetWorkspaceFilesResponse
 */
export type GetWorkspaceFilesResponse = Message<"gazel.api.v1.GetWorkspaceFilesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.GetWorkspaceFilesResponse.WorkspaceFile files = 1;
   */
  files: GetWorkspaceFilesResponse_WorkspaceFile[];
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceFilesResponse.
 * Use `create(GetWorkspaceFilesResponseSchema)` to create a new message.
 */
export const GetWorkspaceFilesResponseSchema: GenMessage<GetWorkspaceFilesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 23);

/**
 * @generated from message gazel.api.v1.GetWorkspaceFilesResponse.WorkspaceFile
 */
export type GetWorkspaceFilesResponse_WorkspaceFile = Message<"gazel.api.v1.GetWorkspaceFilesResponse.WorkspaceFile"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * "workspace", "build", "module"
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: int32 targets = 4;
   */
  targets: number;

  /**
   * @generated from field: int64 last_modified = 5;
   */
  lastModified: bigint;
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceFilesResponse.WorkspaceFile.
 * Use `create(GetWorkspaceFilesResponse_WorkspaceFileSchema)` to create a new message.
 */
export const GetWorkspaceFilesResponse_WorkspaceFileSchema: GenMessage<GetWorkspaceFilesResponse_WorkspaceFile> = /*@__PURE__*/
  messageDesc(file_gazel, 23, 0);

/**
 * @generated from message gazel.api.v1.GetBazelInfoRequest
 */
export type GetBazelInfoRequest = Message<"gazel.api.v1.GetBazelInfoRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetBazelInfoRequest.
 * Use `create(GetBazelInfoRequestSchema)` to create a new message.
 */
export const GetBazelInfoRequestSchema: GenMessage<GetBazelInfoRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 24);

/**
 * @generated from message gazel.api.v1.GetBazelInfoResponse
 */
export type GetBazelInfoResponse = Message<"gazel.api.v1.GetBazelInfoResponse"> & {
  /**
   * @generated from field: gazel.api.v1.BazelInfo info = 1;
   */
  info?: BazelInfo;
};

/**
 * Describes the message gazel.api.v1.GetBazelInfoResponse.
 * Use `create(GetBazelInfoResponseSchema)` to create a new message.
 */
export const GetBazelInfoResponseSchema: GenMessage<GetBazelInfoResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 25);

/**
 * Target Service Messages
 *
 * @generated from message gazel.api.v1.ListTargetsRequest
 */
export type ListTargetsRequest = Message<"gazel.api.v1.ListTargetsRequest"> & {
  /**
   * @generated from field: string pattern = 1;
   */
  pattern: string;

  /**
   * @generated from field: string format = 2;
   */
  format: string;
};

/**
 * Describes the message gazel.api.v1.ListTargetsRequest.
 * Use `create(ListTargetsRequestSchema)` to create a new message.
 */
export const ListTargetsRequestSchema: GenMessage<ListTargetsRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 26);

/**
 * @generated from message gazel.api.v1.ListTargetsResponse
 */
export type ListTargetsResponse = Message<"gazel.api.v1.ListTargetsResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.ListTargetsResponse.data
   */
  data: {
    /**
     * @generated from field: gazel.api.v1.BazelTarget target = 1;
     */
    value: BazelTarget;
    case: "target";
  } | {
    /**
     * @generated from field: gazel.api.v1.ListTargetsComplete complete = 2;
     */
    value: ListTargetsComplete;
    case: "complete";
  } | {
    /**
     * @generated from field: string error = 3;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.ListTargetsResponse.
 * Use `create(ListTargetsResponseSchema)` to create a new message.
 */
export const ListTargetsResponseSchema: GenMessage<ListTargetsResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 27);

/**
 * @generated from message gazel.api.v1.ListTargetsComplete
 */
export type ListTargetsComplete = Message<"gazel.api.v1.ListTargetsComplete"> & {
  /**
   * @generated from field: int32 total = 1;
   */
  total: number;
};

/**
 * Describes the message gazel.api.v1.ListTargetsComplete.
 * Use `create(ListTargetsCompleteSchema)` to create a new message.
 */
export const ListTargetsCompleteSchema: GenMessage<ListTargetsComplete> = /*@__PURE__*/
  messageDesc(file_gazel, 28);

/**
 * @generated from message gazel.api.v1.TargetList
 */
export type TargetList = Message<"gazel.api.v1.TargetList"> & {
  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 1;
   */
  targets: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.TargetList.
 * Use `create(TargetListSchema)` to create a new message.
 */
export const TargetListSchema: GenMessage<TargetList> = /*@__PURE__*/
  messageDesc(file_gazel, 29);

/**
 * @generated from message gazel.api.v1.GetTargetRequest
 */
export type GetTargetRequest = Message<"gazel.api.v1.GetTargetRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetTargetRequest.
 * Use `create(GetTargetRequestSchema)` to create a new message.
 */
export const GetTargetRequestSchema: GenMessage<GetTargetRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 30);

/**
 * @generated from message gazel.api.v1.GetTargetResponse
 */
export type GetTargetResponse = Message<"gazel.api.v1.GetTargetResponse"> & {
  /**
   * @generated from field: gazel.api.v1.BazelTarget target = 1;
   */
  target?: BazelTarget;
};

/**
 * Describes the message gazel.api.v1.GetTargetResponse.
 * Use `create(GetTargetResponseSchema)` to create a new message.
 */
export const GetTargetResponseSchema: GenMessage<GetTargetResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 31);

/**
 * @generated from message gazel.api.v1.GetTargetDependenciesRequest
 */
export type GetTargetDependenciesRequest = Message<"gazel.api.v1.GetTargetDependenciesRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 depth = 2;
   */
  depth: number;
};

/**
 * Describes the message gazel.api.v1.GetTargetDependenciesRequest.
 * Use `create(GetTargetDependenciesRequestSchema)` to create a new message.
 */
export const GetTargetDependenciesRequestSchema: GenMessage<GetTargetDependenciesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 32);

/**
 * @generated from message gazel.api.v1.GetTargetDependenciesResponse
 */
export type GetTargetDependenciesResponse = Message<"gazel.api.v1.GetTargetDependenciesResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 depth = 2;
   */
  depth: number;

  /**
   * @generated from field: int32 total = 3;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget dependencies = 4;
   */
  dependencies: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.GetTargetDependenciesResponse.
 * Use `create(GetTargetDependenciesResponseSchema)` to create a new message.
 */
export const GetTargetDependenciesResponseSchema: GenMessage<GetTargetDependenciesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 33);

/**
 * @generated from message gazel.api.v1.GetTargetOutputsRequest
 */
export type GetTargetOutputsRequest = Message<"gazel.api.v1.GetTargetOutputsRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetTargetOutputsRequest.
 * Use `create(GetTargetOutputsRequestSchema)` to create a new message.
 */
export const GetTargetOutputsRequestSchema: GenMessage<GetTargetOutputsRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 34);

/**
 * @generated from message gazel.api.v1.GetTargetOutputsResponse
 */
export type GetTargetOutputsResponse = Message<"gazel.api.v1.GetTargetOutputsResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string outputs = 2;
   */
  outputs: string[];

  /**
   * @generated from field: int32 count = 3;
   */
  count: number;
};

/**
 * Describes the message gazel.api.v1.GetTargetOutputsResponse.
 * Use `create(GetTargetOutputsResponseSchema)` to create a new message.
 */
export const GetTargetOutputsResponseSchema: GenMessage<GetTargetOutputsResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 35);

/**
 * @generated from message gazel.api.v1.GetReverseDependenciesRequest
 */
export type GetReverseDependenciesRequest = Message<"gazel.api.v1.GetReverseDependenciesRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetReverseDependenciesRequest.
 * Use `create(GetReverseDependenciesRequestSchema)` to create a new message.
 */
export const GetReverseDependenciesRequestSchema: GenMessage<GetReverseDependenciesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 36);

/**
 * @generated from message gazel.api.v1.GetReverseDependenciesResponse
 */
export type GetReverseDependenciesResponse = Message<"gazel.api.v1.GetReverseDependenciesResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget dependencies = 3;
   */
  dependencies: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.GetReverseDependenciesResponse.
 * Use `create(GetReverseDependenciesResponseSchema)` to create a new message.
 */
export const GetReverseDependenciesResponseSchema: GenMessage<GetReverseDependenciesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 37);

/**
 * @generated from message gazel.api.v1.GetOutputConsumersRequest
 */
export type GetOutputConsumersRequest = Message<"gazel.api.v1.GetOutputConsumersRequest"> & {
  /**
   * @generated from field: string output = 1;
   */
  output: string;

  /**
   * The target that produces this output
   *
   * @generated from field: string producing_target = 2;
   */
  producingTarget: string;
};

/**
 * Describes the message gazel.api.v1.GetOutputConsumersRequest.
 * Use `create(GetOutputConsumersRequestSchema)` to create a new message.
 */
export const GetOutputConsumersRequestSchema: GenMessage<GetOutputConsumersRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 38);

/**
 * @generated from message gazel.api.v1.GetOutputConsumersResponse
 */
export type GetOutputConsumersResponse = Message<"gazel.api.v1.GetOutputConsumersResponse"> & {
  /**
   * @generated from field: string output = 1;
   */
  output: string;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget consumers = 3;
   */
  consumers: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.GetOutputConsumersResponse.
 * Use `create(GetOutputConsumersResponseSchema)` to create a new message.
 */
export const GetOutputConsumersResponseSchema: GenMessage<GetOutputConsumersResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 39);

/**
 * @generated from message gazel.api.v1.SearchTargetsRequest
 */
export type SearchTargetsRequest = Message<"gazel.api.v1.SearchTargetsRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string package = 3;
   */
  package: string;
};

/**
 * Describes the message gazel.api.v1.SearchTargetsRequest.
 * Use `create(SearchTargetsRequestSchema)` to create a new message.
 */
export const SearchTargetsRequestSchema: GenMessage<SearchTargetsRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 40);

/**
 * @generated from message gazel.api.v1.SearchTargetsResponse
 */
export type SearchTargetsResponse = Message<"gazel.api.v1.SearchTargetsResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.SearchTargetsResponse.data
   */
  data: {
    /**
     * @generated from field: gazel.api.v1.BazelTarget target = 1;
     */
    value: BazelTarget;
    case: "target";
  } | {
    /**
     * @generated from field: gazel.api.v1.SearchTargetsComplete complete = 2;
     */
    value: SearchTargetsComplete;
    case: "complete";
  } | {
    /**
     * @generated from field: string error = 3;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.SearchTargetsResponse.
 * Use `create(SearchTargetsResponseSchema)` to create a new message.
 */
export const SearchTargetsResponseSchema: GenMessage<SearchTargetsResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 41);

/**
 * @generated from message gazel.api.v1.SearchTargetsComplete
 */
export type SearchTargetsComplete = Message<"gazel.api.v1.SearchTargetsComplete"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;
};

/**
 * Describes the message gazel.api.v1.SearchTargetsComplete.
 * Use `create(SearchTargetsCompleteSchema)` to create a new message.
 */
export const SearchTargetsCompleteSchema: GenMessage<SearchTargetsComplete> = /*@__PURE__*/
  messageDesc(file_gazel, 42);

/**
 * Query Service Messages
 *
 * @generated from message gazel.api.v1.ExecuteQueryRequest
 */
export type ExecuteQueryRequest = Message<"gazel.api.v1.ExecuteQueryRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;

  /**
   * "query", "aquery", or "cquery"
   *
   * @generated from field: string query_type = 3;
   */
  queryType: string;
};

/**
 * Describes the message gazel.api.v1.ExecuteQueryRequest.
 * Use `create(ExecuteQueryRequestSchema)` to create a new message.
 */
export const ExecuteQueryRequestSchema: GenMessage<ExecuteQueryRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 43);

/**
 * @generated from message gazel.api.v1.ExecuteQueryResponse
 */
export type ExecuteQueryResponse = Message<"gazel.api.v1.ExecuteQueryResponse"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;

  /**
   * @generated from field: gazel.api.v1.QueryResult result = 3;
   */
  result?: QueryResult;

  /**
   * @generated from field: string raw = 4;
   */
  raw: string;
};

/**
 * Describes the message gazel.api.v1.ExecuteQueryResponse.
 * Use `create(ExecuteQueryResponseSchema)` to create a new message.
 */
export const ExecuteQueryResponseSchema: GenMessage<ExecuteQueryResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 44);

/**
 * @generated from message gazel.api.v1.QueryResult
 */
export type QueryResult = Message<"gazel.api.v1.QueryResult"> & {
  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 1;
   */
  targets: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.QueryResult.
 * Use `create(QueryResultSchema)` to create a new message.
 */
export const QueryResultSchema: GenMessage<QueryResult> = /*@__PURE__*/
  messageDesc(file_gazel, 45);

/**
 * @generated from message gazel.api.v1.StreamQueryRequest
 */
export type StreamQueryRequest = Message<"gazel.api.v1.StreamQueryRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;

  /**
   * @generated from field: bool parse_xml = 3;
   */
  parseXml: boolean;

  /**
   * "query", "aquery", or "cquery"
   *
   * @generated from field: string query_type = 4;
   */
  queryType: string;
};

/**
 * Describes the message gazel.api.v1.StreamQueryRequest.
 * Use `create(StreamQueryRequestSchema)` to create a new message.
 */
export const StreamQueryRequestSchema: GenMessage<StreamQueryRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 46);

/**
 * @generated from message gazel.api.v1.StreamQueryResponse
 */
export type StreamQueryResponse = Message<"gazel.api.v1.StreamQueryResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.StreamQueryResponse.data
   */
  data: {
    /**
     * @generated from field: gazel.api.v1.BazelTarget target = 1;
     */
    value: BazelTarget;
    case: "target";
  } | {
    /**
     * @generated from field: string raw_line = 2;
     */
    value: string;
    case: "rawLine";
  } | {
    /**
     * @generated from field: string error = 3;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.StreamQueryResponse.
 * Use `create(StreamQueryResponseSchema)` to create a new message.
 */
export const StreamQueryResponseSchema: GenMessage<StreamQueryResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 47);

/**
 * Command Service Messages
 *
 * @generated from message gazel.api.v1.BuildTargetRequest
 */
export type BuildTargetRequest = Message<"gazel.api.v1.BuildTargetRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[];

  /**
   * "build", "test", or "run" (default: "build")
   *
   * @generated from field: string command = 3;
   */
  command: string;
};

/**
 * Describes the message gazel.api.v1.BuildTargetRequest.
 * Use `create(BuildTargetRequestSchema)` to create a new message.
 */
export const BuildTargetRequestSchema: GenMessage<BuildTargetRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 48);

/**
 * @generated from message gazel.api.v1.BuildTargetResponse
 */
export type BuildTargetResponse = Message<"gazel.api.v1.BuildTargetResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string output = 2;
   */
  output: string;

  /**
   * @generated from field: string stderr = 3;
   */
  stderr: string;

  /**
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message gazel.api.v1.BuildTargetResponse.
 * Use `create(BuildTargetResponseSchema)` to create a new message.
 */
export const BuildTargetResponseSchema: GenMessage<BuildTargetResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 49);

/**
 * @generated from message gazel.api.v1.StreamBuildRequest
 */
export type StreamBuildRequest = Message<"gazel.api.v1.StreamBuildRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[];
};

/**
 * Describes the message gazel.api.v1.StreamBuildRequest.
 * Use `create(StreamBuildRequestSchema)` to create a new message.
 */
export const StreamBuildRequestSchema: GenMessage<StreamBuildRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 50);

/**
 * @generated from message gazel.api.v1.StreamBuildResponse
 */
export type StreamBuildResponse = Message<"gazel.api.v1.StreamBuildResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.StreamBuildResponse.event
   */
  event: {
    /**
     * @generated from field: string output = 1;
     */
    value: string;
    case: "output";
  } | {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: gazel.api.v1.BuildProgress progress = 3;
     */
    value: BuildProgress;
    case: "progress";
  } | {
    /**
     * @generated from field: gazel.api.v1.BuildComplete complete = 4;
     */
    value: BuildComplete;
    case: "complete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.StreamBuildResponse.
 * Use `create(StreamBuildResponseSchema)` to create a new message.
 */
export const StreamBuildResponseSchema: GenMessage<StreamBuildResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 51);

/**
 * @generated from message gazel.api.v1.BuildProgress
 */
export type BuildProgress = Message<"gazel.api.v1.BuildProgress"> & {
  /**
   * @generated from field: int32 actions_completed = 1;
   */
  actionsCompleted: number;

  /**
   * @generated from field: int32 actions_total = 2;
   */
  actionsTotal: number;

  /**
   * @generated from field: string current_action = 3;
   */
  currentAction: string;
};

/**
 * Describes the message gazel.api.v1.BuildProgress.
 * Use `create(BuildProgressSchema)` to create a new message.
 */
export const BuildProgressSchema: GenMessage<BuildProgress> = /*@__PURE__*/
  messageDesc(file_gazel, 52);

/**
 * @generated from message gazel.api.v1.BuildComplete
 */
export type BuildComplete = Message<"gazel.api.v1.BuildComplete"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: int32 exit_code = 2;
   */
  exitCode: number;

  /**
   * @generated from field: int64 duration_ms = 3;
   */
  durationMs: bigint;
};

/**
 * Describes the message gazel.api.v1.BuildComplete.
 * Use `create(BuildCompleteSchema)` to create a new message.
 */
export const BuildCompleteSchema: GenMessage<BuildComplete> = /*@__PURE__*/
  messageDesc(file_gazel, 53);

/**
 * Module Service Messages
 *
 * @generated from message gazel.api.v1.GetModuleGraphRequest
 */
export type GetModuleGraphRequest = Message<"gazel.api.v1.GetModuleGraphRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphRequest.
 * Use `create(GetModuleGraphRequestSchema)` to create a new message.
 */
export const GetModuleGraphRequestSchema: GenMessage<GetModuleGraphRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 54);

/**
 * @generated from message gazel.api.v1.GetModuleGraphResponse
 */
export type GetModuleGraphResponse = Message<"gazel.api.v1.GetModuleGraphResponse"> & {
  /**
   * @generated from field: string root = 1;
   */
  root: string;

  /**
   * @generated from field: repeated gazel.api.v1.Module modules = 2;
   */
  modules: Module[];

  /**
   * @generated from field: repeated gazel.api.v1.ModuleDependency dependencies = 3;
   */
  dependencies: ModuleDependency[];

  /**
   * @generated from field: gazel.api.v1.ModuleStatistics statistics = 4;
   */
  statistics?: ModuleStatistics;
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphResponse.
 * Use `create(GetModuleGraphResponseSchema)` to create a new message.
 */
export const GetModuleGraphResponseSchema: GenMessage<GetModuleGraphResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 55);

/**
 * @generated from message gazel.api.v1.ModuleStatistics
 */
export type ModuleStatistics = Message<"gazel.api.v1.ModuleStatistics"> & {
  /**
   * @generated from field: int32 total_modules = 1;
   */
  totalModules: number;

  /**
   * @generated from field: int32 direct_dependencies = 2;
   */
  directDependencies: number;

  /**
   * @generated from field: int32 dev_dependencies = 3;
   */
  devDependencies: number;

  /**
   * @generated from field: int32 indirect_dependencies = 4;
   */
  indirectDependencies: number;
};

/**
 * Describes the message gazel.api.v1.ModuleStatistics.
 * Use `create(ModuleStatisticsSchema)` to create a new message.
 */
export const ModuleStatisticsSchema: GenMessage<ModuleStatistics> = /*@__PURE__*/
  messageDesc(file_gazel, 56);

/**
 * @generated from message gazel.api.v1.GetModuleInfoRequest
 */
export type GetModuleInfoRequest = Message<"gazel.api.v1.GetModuleInfoRequest"> & {
  /**
   * @generated from field: string module_name = 1;
   */
  moduleName: string;
};

/**
 * Describes the message gazel.api.v1.GetModuleInfoRequest.
 * Use `create(GetModuleInfoRequestSchema)` to create a new message.
 */
export const GetModuleInfoRequestSchema: GenMessage<GetModuleInfoRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 57);

/**
 * @generated from message gazel.api.v1.GetModuleInfoResponse
 */
export type GetModuleInfoResponse = Message<"gazel.api.v1.GetModuleInfoResponse"> & {
  /**
   * @generated from field: gazel.api.v1.Module module = 1;
   */
  module?: Module;
};

/**
 * Describes the message gazel.api.v1.GetModuleInfoResponse.
 * Use `create(GetModuleInfoResponseSchema)` to create a new message.
 */
export const GetModuleInfoResponseSchema: GenMessage<GetModuleInfoResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 58);

/**
 * @generated from message gazel.api.v1.GetModuleGraphDotRequest
 */
export type GetModuleGraphDotRequest = Message<"gazel.api.v1.GetModuleGraphDotRequest"> & {
  /**
   * Additional options like --depth, --from, etc.
   *
   * @generated from field: repeated string options = 1;
   */
  options: string[];
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphDotRequest.
 * Use `create(GetModuleGraphDotRequestSchema)` to create a new message.
 */
export const GetModuleGraphDotRequestSchema: GenMessage<GetModuleGraphDotRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 59);

/**
 * @generated from message gazel.api.v1.GetModuleGraphDotResponse
 */
export type GetModuleGraphDotResponse = Message<"gazel.api.v1.GetModuleGraphDotResponse"> & {
  /**
   * DOT format graph
   *
   * @generated from field: string dot = 1;
   */
  dot: string;
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphDotResponse.
 * Use `create(GetModuleGraphDotResponseSchema)` to create a new message.
 */
export const GetModuleGraphDotResponseSchema: GenMessage<GetModuleGraphDotResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 60);

/**
 * @generated from message gazel.api.v1.GetQueryTemplatesRequest
 */
export type GetQueryTemplatesRequest = Message<"gazel.api.v1.GetQueryTemplatesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetQueryTemplatesRequest.
 * Use `create(GetQueryTemplatesRequestSchema)` to create a new message.
 */
export const GetQueryTemplatesRequestSchema: GenMessage<GetQueryTemplatesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 61);

/**
 * @generated from message gazel.api.v1.GetQueryTemplatesResponse
 */
export type GetQueryTemplatesResponse = Message<"gazel.api.v1.GetQueryTemplatesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.QueryTemplate templates = 1;
   */
  templates: QueryTemplate[];
};

/**
 * Describes the message gazel.api.v1.GetQueryTemplatesResponse.
 * Use `create(GetQueryTemplatesResponseSchema)` to create a new message.
 */
export const GetQueryTemplatesResponseSchema: GenMessage<GetQueryTemplatesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 62);

/**
 * @generated from message gazel.api.v1.GetSavedQueriesRequest
 */
export type GetSavedQueriesRequest = Message<"gazel.api.v1.GetSavedQueriesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetSavedQueriesRequest.
 * Use `create(GetSavedQueriesRequestSchema)` to create a new message.
 */
export const GetSavedQueriesRequestSchema: GenMessage<GetSavedQueriesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 63);

/**
 * @generated from message gazel.api.v1.GetSavedQueriesResponse
 */
export type GetSavedQueriesResponse = Message<"gazel.api.v1.GetSavedQueriesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.SavedQuery queries = 1;
   */
  queries: SavedQuery[];
};

/**
 * Describes the message gazel.api.v1.GetSavedQueriesResponse.
 * Use `create(GetSavedQueriesResponseSchema)` to create a new message.
 */
export const GetSavedQueriesResponseSchema: GenMessage<GetSavedQueriesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 64);

/**
 * @generated from message gazel.api.v1.SaveQueryRequest
 */
export type SaveQueryRequest = Message<"gazel.api.v1.SaveQueryRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string query = 2;
   */
  query: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message gazel.api.v1.SaveQueryRequest.
 * Use `create(SaveQueryRequestSchema)` to create a new message.
 */
export const SaveQueryRequestSchema: GenMessage<SaveQueryRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 65);

/**
 * @generated from message gazel.api.v1.SaveQueryResponse
 */
export type SaveQueryResponse = Message<"gazel.api.v1.SaveQueryResponse"> & {
  /**
   * @generated from field: gazel.api.v1.SavedQuery query = 1;
   */
  query?: SavedQuery;
};

/**
 * Describes the message gazel.api.v1.SaveQueryResponse.
 * Use `create(SaveQueryResponseSchema)` to create a new message.
 */
export const SaveQueryResponseSchema: GenMessage<SaveQueryResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 66);

/**
 * @generated from message gazel.api.v1.DeleteQueryRequest
 */
export type DeleteQueryRequest = Message<"gazel.api.v1.DeleteQueryRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message gazel.api.v1.DeleteQueryRequest.
 * Use `create(DeleteQueryRequestSchema)` to create a new message.
 */
export const DeleteQueryRequestSchema: GenMessage<DeleteQueryRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 67);

/**
 * @generated from message gazel.api.v1.DeleteQueryResponse
 */
export type DeleteQueryResponse = Message<"gazel.api.v1.DeleteQueryResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message gazel.api.v1.DeleteQueryResponse.
 * Use `create(DeleteQueryResponseSchema)` to create a new message.
 */
export const DeleteQueryResponseSchema: GenMessage<DeleteQueryResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 68);

/**
 * @generated from message gazel.api.v1.StreamRunRequest
 */
export type StreamRunRequest = Message<"gazel.api.v1.StreamRunRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[];
};

/**
 * Describes the message gazel.api.v1.StreamRunRequest.
 * Use `create(StreamRunRequestSchema)` to create a new message.
 */
export const StreamRunRequestSchema: GenMessage<StreamRunRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 69);

/**
 * @generated from message gazel.api.v1.StreamRunResponse
 */
export type StreamRunResponse = Message<"gazel.api.v1.StreamRunResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.StreamRunResponse.event
   */
  event: {
    /**
     * @generated from field: string output = 1;
     */
    value: string;
    case: "output";
  } | {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: gazel.api.v1.RunProgress progress = 3;
     */
    value: RunProgress;
    case: "progress";
  } | {
    /**
     * @generated from field: gazel.api.v1.RunComplete complete = 4;
     */
    value: RunComplete;
    case: "complete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.StreamRunResponse.
 * Use `create(StreamRunResponseSchema)` to create a new message.
 */
export const StreamRunResponseSchema: GenMessage<StreamRunResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 70);

/**
 * @generated from message gazel.api.v1.RunProgress
 */
export type RunProgress = Message<"gazel.api.v1.RunProgress"> & {
  /**
   * @generated from field: string current_action = 1;
   */
  currentAction: string;
};

/**
 * Describes the message gazel.api.v1.RunProgress.
 * Use `create(RunProgressSchema)` to create a new message.
 */
export const RunProgressSchema: GenMessage<RunProgress> = /*@__PURE__*/
  messageDesc(file_gazel, 71);

/**
 * @generated from message gazel.api.v1.RunComplete
 */
export type RunComplete = Message<"gazel.api.v1.RunComplete"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: int32 exit_code = 2;
   */
  exitCode: number;

  /**
   * @generated from field: int64 duration_ms = 3;
   */
  durationMs: bigint;
};

/**
 * Describes the message gazel.api.v1.RunComplete.
 * Use `create(RunCompleteSchema)` to create a new message.
 */
export const RunCompleteSchema: GenMessage<RunComplete> = /*@__PURE__*/
  messageDesc(file_gazel, 72);

/**
 * File Service Messages
 *
 * @generated from message gazel.api.v1.GetBuildFileRequest
 */
export type GetBuildFileRequest = Message<"gazel.api.v1.GetBuildFileRequest"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message gazel.api.v1.GetBuildFileRequest.
 * Use `create(GetBuildFileRequestSchema)` to create a new message.
 */
export const GetBuildFileRequestSchema: GenMessage<GetBuildFileRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 73);

/**
 * @generated from message gazel.api.v1.GetBuildFileResponse
 */
export type GetBuildFileResponse = Message<"gazel.api.v1.GetBuildFileResponse"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string content = 2;
   */
  content: string;

  /**
   * @generated from field: repeated gazel.api.v1.BuildFileTarget targets = 3;
   */
  targets: BuildFileTarget[];

  /**
   * @generated from field: int32 lines = 4;
   */
  lines: number;
};

/**
 * Describes the message gazel.api.v1.GetBuildFileResponse.
 * Use `create(GetBuildFileResponseSchema)` to create a new message.
 */
export const GetBuildFileResponseSchema: GenMessage<GetBuildFileResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 74);

/**
 * @generated from message gazel.api.v1.BuildFileTarget
 */
export type BuildFileTarget = Message<"gazel.api.v1.BuildFileTarget"> & {
  /**
   * @generated from field: string rule_type = 1;
   */
  ruleType: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: int32 line = 3;
   */
  line: number;
};

/**
 * Describes the message gazel.api.v1.BuildFileTarget.
 * Use `create(BuildFileTargetSchema)` to create a new message.
 */
export const BuildFileTargetSchema: GenMessage<BuildFileTarget> = /*@__PURE__*/
  messageDesc(file_gazel, 75);

/**
 * @generated from message gazel.api.v1.GetRulesByFileRequest
 */
export type GetRulesByFileRequest = Message<"gazel.api.v1.GetRulesByFileRequest"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;
};

/**
 * Describes the message gazel.api.v1.GetRulesByFileRequest.
 * Use `create(GetRulesByFileRequestSchema)` to create a new message.
 */
export const GetRulesByFileRequestSchema: GenMessage<GetRulesByFileRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 76);

/**
 * @generated from message gazel.api.v1.GetRulesByFileResponse
 */
export type GetRulesByFileResponse = Message<"gazel.api.v1.GetRulesByFileResponse"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: repeated blaze_query.Rule rules = 2;
   */
  rules: Rule[];
};

/**
 * Describes the message gazel.api.v1.GetRulesByFileResponse.
 * Use `create(GetRulesByFileResponseSchema)` to create a new message.
 */
export const GetRulesByFileResponseSchema: GenMessage<GetRulesByFileResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 77);

/**
 * @generated from message gazel.api.v1.SearchInFilesRequest
 */
export type SearchInFilesRequest = Message<"gazel.api.v1.SearchInFilesRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: bool case_sensitive = 2;
   */
  caseSensitive: boolean;
};

/**
 * Describes the message gazel.api.v1.SearchInFilesRequest.
 * Use `create(SearchInFilesRequestSchema)` to create a new message.
 */
export const SearchInFilesRequestSchema: GenMessage<SearchInFilesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 78);

/**
 * @generated from message gazel.api.v1.SearchInFilesResponse
 */
export type SearchInFilesResponse = Message<"gazel.api.v1.SearchInFilesResponse"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: bool case_sensitive = 2;
   */
  caseSensitive: boolean;

  /**
   * @generated from field: int32 total = 3;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.SearchResult results = 4;
   */
  results: SearchResult[];
};

/**
 * Describes the message gazel.api.v1.SearchInFilesResponse.
 * Use `create(SearchInFilesResponseSchema)` to create a new message.
 */
export const SearchInFilesResponseSchema: GenMessage<SearchInFilesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 79);

/**
 * @generated from message gazel.api.v1.SearchResult
 */
export type SearchResult = Message<"gazel.api.v1.SearchResult"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: int32 line = 2;
   */
  line: number;

  /**
   * @generated from field: string content = 3;
   */
  content: string;
};

/**
 * Describes the message gazel.api.v1.SearchResult.
 * Use `create(SearchResultSchema)` to create a new message.
 */
export const SearchResultSchema: GenMessage<SearchResult> = /*@__PURE__*/
  messageDesc(file_gazel, 80);

/**
 * Command History Messages
 *
 * @generated from message gazel.api.v1.GetCommandHistoryRequest
 */
export type GetCommandHistoryRequest = Message<"gazel.api.v1.GetCommandHistoryRequest"> & {
  /**
   * Maximum number of history items to return (default: 50)
   *
   * @generated from field: int32 limit = 1;
   */
  limit: number;
};

/**
 * Describes the message gazel.api.v1.GetCommandHistoryRequest.
 * Use `create(GetCommandHistoryRequestSchema)` to create a new message.
 */
export const GetCommandHistoryRequestSchema: GenMessage<GetCommandHistoryRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 81);

/**
 * @generated from message gazel.api.v1.GetCommandHistoryResponse
 */
export type GetCommandHistoryResponse = Message<"gazel.api.v1.GetCommandHistoryResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.CommandHistoryItem history = 1;
   */
  history: CommandHistoryItem[];
};

/**
 * Describes the message gazel.api.v1.GetCommandHistoryResponse.
 * Use `create(GetCommandHistoryResponseSchema)` to create a new message.
 */
export const GetCommandHistoryResponseSchema: GenMessage<GetCommandHistoryResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 82);

/**
 * @generated from message gazel.api.v1.CommandHistoryItem
 */
export type CommandHistoryItem = Message<"gazel.api.v1.CommandHistoryItem"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * "build", "test", "run"
   *
   * @generated from field: string command = 2;
   */
  command: string;

  /**
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 4;
   */
  options: string[];

  /**
   * @generated from field: int64 timestamp = 5;
   */
  timestamp: bigint;

  /**
   * @generated from field: bool success = 6;
   */
  success: boolean;

  /**
   * @generated from field: string output = 7;
   */
  output: string;

  /**
   * @generated from field: string error = 8;
   */
  error: string;

  /**
   * @generated from field: int32 duration_ms = 9;
   */
  durationMs: number;
};

/**
 * Describes the message gazel.api.v1.CommandHistoryItem.
 * Use `create(CommandHistoryItemSchema)` to create a new message.
 */
export const CommandHistoryItemSchema: GenMessage<CommandHistoryItem> = /*@__PURE__*/
  messageDesc(file_gazel, 83);

/**
 * Configuration messages
 *
 * @generated from message gazel.api.v1.UpdateBazelExecutableRequest
 */
export type UpdateBazelExecutableRequest = Message<"gazel.api.v1.UpdateBazelExecutableRequest"> & {
  /**
   * Path to bazel/bazelisk executable (empty for auto-detect)
   *
   * @generated from field: string executable = 1;
   */
  executable: string;
};

/**
 * Describes the message gazel.api.v1.UpdateBazelExecutableRequest.
 * Use `create(UpdateBazelExecutableRequestSchema)` to create a new message.
 */
export const UpdateBazelExecutableRequestSchema: GenMessage<UpdateBazelExecutableRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 84);

/**
 * @generated from message gazel.api.v1.UpdateBazelExecutableResponse
 */
export type UpdateBazelExecutableResponse = Message<"gazel.api.v1.UpdateBazelExecutableResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * The actual path being used after resolution
   *
   * @generated from field: string detected_path = 3;
   */
  detectedPath: string;
};

/**
 * Describes the message gazel.api.v1.UpdateBazelExecutableResponse.
 * Use `create(UpdateBazelExecutableResponseSchema)` to create a new message.
 */
export const UpdateBazelExecutableResponseSchema: GenMessage<UpdateBazelExecutableResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 85);

/**
 * @generated from service gazel.api.v1.GazelService
 */
export const GazelService: GenService<{
  /**
   * Workspace operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetWorkspaceInfo
   */
  getWorkspaceInfo: {
    methodKind: "unary";
    input: typeof GetWorkspaceInfoRequestSchema;
    output: typeof GetWorkspaceInfoResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetCurrentWorkspace
   */
  getCurrentWorkspace: {
    methodKind: "unary";
    input: typeof GetCurrentWorkspaceRequestSchema;
    output: typeof GetCurrentWorkspaceResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.ScanWorkspaces
   */
  scanWorkspaces: {
    methodKind: "unary";
    input: typeof ScanWorkspacesRequestSchema;
    output: typeof ScanWorkspacesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SwitchWorkspace
   */
  switchWorkspace: {
    methodKind: "unary";
    input: typeof SwitchWorkspaceRequestSchema;
    output: typeof SwitchWorkspaceResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetWorkspaceFiles
   */
  getWorkspaceFiles: {
    methodKind: "unary";
    input: typeof GetWorkspaceFilesRequestSchema;
    output: typeof GetWorkspaceFilesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetBazelInfo
   */
  getBazelInfo: {
    methodKind: "unary";
    input: typeof GetBazelInfoRequestSchema;
    output: typeof GetBazelInfoResponseSchema;
  },
  /**
   * Target operations
   *
   * @generated from rpc gazel.api.v1.GazelService.ListTargets
   */
  listTargets: {
    methodKind: "server_streaming";
    input: typeof ListTargetsRequestSchema;
    output: typeof ListTargetsResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTarget
   */
  getTarget: {
    methodKind: "unary";
    input: typeof GetTargetRequestSchema;
    output: typeof GetTargetResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTargetDependencies
   */
  getTargetDependencies: {
    methodKind: "unary";
    input: typeof GetTargetDependenciesRequestSchema;
    output: typeof GetTargetDependenciesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTargetOutputs
   */
  getTargetOutputs: {
    methodKind: "unary";
    input: typeof GetTargetOutputsRequestSchema;
    output: typeof GetTargetOutputsResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetReverseDependencies
   */
  getReverseDependencies: {
    methodKind: "unary";
    input: typeof GetReverseDependenciesRequestSchema;
    output: typeof GetReverseDependenciesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetOutputConsumers
   */
  getOutputConsumers: {
    methodKind: "unary";
    input: typeof GetOutputConsumersRequestSchema;
    output: typeof GetOutputConsumersResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SearchTargets
   */
  searchTargets: {
    methodKind: "server_streaming";
    input: typeof SearchTargetsRequestSchema;
    output: typeof SearchTargetsResponseSchema;
  },
  /**
   * Query operations
   *
   * @generated from rpc gazel.api.v1.GazelService.ExecuteQuery
   */
  executeQuery: {
    methodKind: "unary";
    input: typeof ExecuteQueryRequestSchema;
    output: typeof ExecuteQueryResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.StreamQuery
   */
  streamQuery: {
    methodKind: "server_streaming";
    input: typeof StreamQueryRequestSchema;
    output: typeof StreamQueryResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetQueryTemplates
   */
  getQueryTemplates: {
    methodKind: "unary";
    input: typeof GetQueryTemplatesRequestSchema;
    output: typeof GetQueryTemplatesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetSavedQueries
   */
  getSavedQueries: {
    methodKind: "unary";
    input: typeof GetSavedQueriesRequestSchema;
    output: typeof GetSavedQueriesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SaveQuery
   */
  saveQuery: {
    methodKind: "unary";
    input: typeof SaveQueryRequestSchema;
    output: typeof SaveQueryResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.DeleteQuery
   */
  deleteQuery: {
    methodKind: "unary";
    input: typeof DeleteQueryRequestSchema;
    output: typeof DeleteQueryResponseSchema;
  },
  /**
   * Build operations
   *
   * @generated from rpc gazel.api.v1.GazelService.BuildTarget
   */
  buildTarget: {
    methodKind: "unary";
    input: typeof BuildTargetRequestSchema;
    output: typeof BuildTargetResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.StreamBuild
   */
  streamBuild: {
    methodKind: "server_streaming";
    input: typeof StreamBuildRequestSchema;
    output: typeof StreamBuildResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.StreamRun
   */
  streamRun: {
    methodKind: "server_streaming";
    input: typeof StreamRunRequestSchema;
    output: typeof StreamRunResponseSchema;
  },
  /**
   * Module operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetModuleGraph
   */
  getModuleGraph: {
    methodKind: "unary";
    input: typeof GetModuleGraphRequestSchema;
    output: typeof GetModuleGraphResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetModuleInfo
   */
  getModuleInfo: {
    methodKind: "unary";
    input: typeof GetModuleInfoRequestSchema;
    output: typeof GetModuleInfoResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetModuleGraphDot
   */
  getModuleGraphDot: {
    methodKind: "unary";
    input: typeof GetModuleGraphDotRequestSchema;
    output: typeof GetModuleGraphDotResponseSchema;
  },
  /**
   * File operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetBuildFile
   */
  getBuildFile: {
    methodKind: "unary";
    input: typeof GetBuildFileRequestSchema;
    output: typeof GetBuildFileResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetRulesByFile
   */
  getRulesByFile: {
    methodKind: "unary";
    input: typeof GetRulesByFileRequestSchema;
    output: typeof GetRulesByFileResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SearchInFiles
   */
  searchInFiles: {
    methodKind: "unary";
    input: typeof SearchInFilesRequestSchema;
    output: typeof SearchInFilesResponseSchema;
  },
  /**
   * Command history operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetCommandHistory
   */
  getCommandHistory: {
    methodKind: "unary";
    input: typeof GetCommandHistoryRequestSchema;
    output: typeof GetCommandHistoryResponseSchema;
  },
  /**
   * Configuration operations
   *
   * @generated from rpc gazel.api.v1.GazelService.UpdateBazelExecutable
   */
  updateBazelExecutable: {
    methodKind: "unary";
    input: typeof UpdateBazelExecutableRequestSchema;
    output: typeof UpdateBazelExecutableResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_gazel, 0);

