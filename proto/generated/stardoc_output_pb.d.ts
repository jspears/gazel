// Copyright 2019 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Protos for Stardoc data.
//
// Stardoc collects information about Starlark functions, providers, and rules.

// @generated by protoc-gen-es v2.9.0 with parameter "import_extension=js"
// @generated from file stardoc_output.proto (package stardoc_output, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file stardoc_output.proto.
 */
export declare const file_stardoc_output: GenFile;

/**
 * The root output proto of Stardoc. An invocation of Stardoc on a single file
 * will output exactly one instance of this proto, representing all
 * documentation for the input Starlark file.
 *
 * @generated from message stardoc_output.ModuleInfo
 */
export declare type ModuleInfo = Message<"stardoc_output.ModuleInfo"> & {
  /**
   * @generated from field: repeated stardoc_output.RuleInfo rule_info = 1;
   */
  ruleInfo: RuleInfo[];

  /**
   * @generated from field: repeated stardoc_output.ProviderInfo provider_info = 2;
   */
  providerInfo: ProviderInfo[];

  /**
   * @generated from field: repeated stardoc_output.StarlarkFunctionInfo func_info = 3;
   */
  funcInfo: StarlarkFunctionInfo[];

  /**
   * @generated from field: repeated stardoc_output.AspectInfo aspect_info = 4;
   */
  aspectInfo: AspectInfo[];

  /**
   * The docstring present at the top of the input Starlark file.
   *
   * @generated from field: string module_docstring = 5;
   */
  moduleDocstring: string;

  /**
   * The display form of the label of the module file (as seen from the
   * starlark_doc_extract or Stardoc target's repo). Unset when there is no
   * module file (e.g. when the module is a REPL, or in Bazel's internal tests).
   *
   * @generated from field: string file = 6;
   */
  file: string;

  /**
   * @generated from field: repeated stardoc_output.ModuleExtensionInfo module_extension_info = 7;
   */
  moduleExtensionInfo: ModuleExtensionInfo[];

  /**
   * @generated from field: repeated stardoc_output.RepositoryRuleInfo repository_rule_info = 8;
   */
  repositoryRuleInfo: RepositoryRuleInfo[];

  /**
   * @generated from field: repeated stardoc_output.MacroInfo macro_info = 9;
   */
  macroInfo: MacroInfo[];
};

/**
 * Describes the message stardoc_output.ModuleInfo.
 * Use `create(ModuleInfoSchema)` to create a new message.
 */
export declare const ModuleInfoSchema: GenMessage<ModuleInfo>;

/**
 * Representation of a Starlark rule definition.
 *
 * @generated from message stardoc_output.RuleInfo
 */
export declare type RuleInfo = Message<"stardoc_output.RuleInfo"> & {
  /**
   * In Stardoc and starlark_doc_extract output, this is the name under which
   * the rule is made accessible to a user of this module, including any structs
   * it is nested in, for example "foo.foo_library".
   *
   * In query output, this is the name under which the rule was defined (which
   * might be a private symbol prefixed with "_").
   *
   * @generated from field: string rule_name = 1;
   */
  ruleName: string;

  /**
   * The documentation string of the rule.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * The attributes of the rule.
   *
   * @generated from field: repeated stardoc_output.AttributeInfo attribute = 3;
   */
  attribute: AttributeInfo[];

  /**
   * The module where and the name under which the rule was originally declared.
   *
   * @generated from field: stardoc_output.OriginKey origin_key = 4;
   */
  originKey?: OriginKey;

  /**
   * The list of providers that the rule's implementation must return. Unset if
   * the rule lists no advertised providers.
   *
   * @generated from field: stardoc_output.ProviderNameGroup advertised_providers = 5;
   */
  advertisedProviders?: ProviderNameGroup;

  /**
   * True if this is a test rule.
   *
   * @generated from field: bool test = 6;
   */
  test: boolean;

  /**
   * True if this is an executable rule.
   *
   * Note: if test is true, executable is also true (test rules are implicitly
   * executable).
   *
   * @generated from field: bool executable = 7;
   */
  executable: boolean;
};

/**
 * Describes the message stardoc_output.RuleInfo.
 * Use `create(RuleInfoSchema)` to create a new message.
 */
export declare const RuleInfoSchema: GenMessage<RuleInfo>;

/**
 * Representation of a Starlark symbolic macro definition.
 * Note: symbolic macros (and thus, their documentation format) are an
 * experimental feature gated by the --experimental_enable_first_class_macros
 * flag.
 *
 * @generated from message stardoc_output.MacroInfo
 */
export declare type MacroInfo = Message<"stardoc_output.MacroInfo"> & {
  /**
   * The name under which the macro is made accessible to a user of this module,
   * including any structs it is nested in, for example "foo.foo_library".
   *
   * @generated from field: string macro_name = 1;
   */
  macroName: string;

  /**
   * The documentation string of the macro.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * The attributes of the macro.
   *
   * @generated from field: repeated stardoc_output.AttributeInfo attribute = 3;
   */
  attribute: AttributeInfo[];

  /**
   * The module where and the name under which the macro was originally
   * declared.
   *
   * @generated from field: stardoc_output.OriginKey origin_key = 4;
   */
  originKey?: OriginKey;

  /**
   * True if this macro is a rule finalizer.
   *
   * @generated from field: bool finalizer = 5;
   */
  finalizer: boolean;
};

/**
 * Describes the message stardoc_output.MacroInfo.
 * Use `create(MacroInfoSchema)` to create a new message.
 */
export declare const MacroInfoSchema: GenMessage<MacroInfo>;

/**
 * Representation of a Starlark rule, repository rule, or module extension tag
 * attribute definition, comprised of an attribute name, and a schema defined by
 * a call to one of the 'attr' module methods enumerated at
 * https://bazel.build/rules/lib/attr
 *
 * @generated from message stardoc_output.AttributeInfo
 */
export declare type AttributeInfo = Message<"stardoc_output.AttributeInfo"> & {
  /**
   * The name of the attribute.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The documentation string of the attribute, supplied via the 'doc'
   * parameter to the schema-creation call.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * The type of the attribute, defined generally by which function is invoked
   * in the attr module.
   *
   * @generated from field: stardoc_output.AttributeType type = 3;
   */
  type: AttributeType;

  /**
   * If true, all targets of the rule must specify a value for this attribute.
   *
   * @generated from field: bool mandatory = 4;
   */
  mandatory: boolean;

  /**
   * The target(s) in this attribute must define all the providers of at least
   * one of the ProviderNameGroups in this list. If the Attribute Type is not a
   * label, a label list, or a label-keyed string dictionary, the field will be
   * left empty. For attributes of a repository rule or a module extension tag,
   * this attribute is meaningless and may be ignored.
   * TODO(b/290788853): ensure this field is always empty for attributes of a
   * repository rule or a module extension tag.
   *
   * @generated from field: repeated stardoc_output.ProviderNameGroup provider_name_group = 5;
   */
  providerNameGroup: ProviderNameGroup[];

  /**
   * The string representation of the default value of this attribute.
   *
   * @generated from field: string default_value = 6;
   */
  defaultValue: string;

  /**
   * If true, the attribute is non-configurable.
   *
   * @generated from field: bool nonconfigurable = 7;
   */
  nonconfigurable: boolean;

  /**
   * If true, the attribute is defined in Bazel's native code, not in Starlark.
   *
   * @generated from field: bool natively_defined = 8;
   */
  nativelyDefined: boolean;
};

/**
 * Describes the message stardoc_output.AttributeInfo.
 * Use `create(AttributeInfoSchema)` to create a new message.
 */
export declare const AttributeInfoSchema: GenMessage<AttributeInfo>;

/**
 * Representation of a set of providers.
 *
 * @generated from message stardoc_output.ProviderNameGroup
 */
export declare type ProviderNameGroup = Message<"stardoc_output.ProviderNameGroup"> & {
  /**
   * The names of the providers.
   *
   * This field is only intended for rendering human-readable output.
   * Please use origin_key (a list of the same length and in the same order as
   * this field) for cross-references and tooling.
   *
   * Note: legacy Stardoc (0.5.x and earlier) is unable to extract the name in
   * some circumstances (for example, if the provider is nested in a struct),
   * and in that case, the provider name will be "Unknown Provider".
   *
   * @generated from field: repeated string provider_name = 1;
   */
  providerName: string[];

  /**
   * A list of unambiguous references to providers, of the same length and in
   * the same order as the provider_name list.
   *
   * For provider symbols, this means modules where and the names under which
   * the providers were originally declared.
   *
   * For legacy struct providers, origin_key.file is unset.
   *
   * Note: legacy Stardoc (0.5.x and earlier) does not set this field.
   *
   * @generated from field: repeated stardoc_output.OriginKey origin_key = 2;
   */
  originKey: OriginKey[];
};

/**
 * Describes the message stardoc_output.ProviderNameGroup.
 * Use `create(ProviderNameGroupSchema)` to create a new message.
 */
export declare const ProviderNameGroupSchema: GenMessage<ProviderNameGroup>;

/**
 * Representation of Starlark function definition.
 *
 * @generated from message stardoc_output.StarlarkFunctionInfo
 */
export declare type StarlarkFunctionInfo = Message<"stardoc_output.StarlarkFunctionInfo"> & {
  /**
   * The name under which the function is made accessible to a user of this
   * module, including any structs it is nested in, for example
   * "foo.frobnicate".
   *
   * @generated from field: string function_name = 1;
   */
  functionName: string;

  /**
   * The parameters for the function, in the following order:
   * - positional parameters
   * - keyword-only parameters
   * - residual varargs parameter (`*args`)
   * - residual keyword arguments parameter (`**kwargs`)
   * This order differs from the order in which parameters are listed in the
   * function's declaration (where positional parameters and keyword-only
   * parameters are separated either by `*` or `*args`). The declaration order
   * can be recovered by looking for the transition from ordinary/positional to
   * keyword-only.
   *
   * @generated from field: repeated stardoc_output.FunctionParamInfo parameter = 2;
   */
  parameter: FunctionParamInfo[];

  /**
   * The documented description of the function (if specified in the function's
   * docstring).
   *
   * @generated from field: string doc_string = 3;
   */
  docString: string;

  /**
   * The return value for the function.
   *
   * @generated from field: stardoc_output.FunctionReturnInfo return = 4;
   */
  return?: FunctionReturnInfo;

  /**
   * The deprecation for the function.
   *
   * @generated from field: stardoc_output.FunctionDeprecationInfo deprecated = 5;
   */
  deprecated?: FunctionDeprecationInfo;

  /**
   * The module where and the name under which the function was originally
   * declared.
   *
   * Note: legacy Stardoc (0.5.x and earlier) does not set this field.
   *
   * @generated from field: stardoc_output.OriginKey origin_key = 6;
   */
  originKey?: OriginKey;
};

/**
 * Describes the message stardoc_output.StarlarkFunctionInfo.
 * Use `create(StarlarkFunctionInfoSchema)` to create a new message.
 */
export declare const StarlarkFunctionInfoSchema: GenMessage<StarlarkFunctionInfo>;

/**
 * Representation of a Starlark function parameter definition.
 *
 * @generated from message stardoc_output.FunctionParamInfo
 */
export declare type FunctionParamInfo = Message<"stardoc_output.FunctionParamInfo"> & {
  /**
   * The name of the parameter. This does *not* include the `*` or `**` prefix
   * for varargs or residual keyword argument parameters.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The documented description of the parameter (if specified in the function's
   * docstring).
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * If not an empty string, the default value of the parameter displayed
   * as a string.
   *
   * @generated from field: string default_value = 3;
   */
  defaultValue: string;

  /**
   * If true, the default value is unset and a value is needed for this
   * parameter. This might be false even if defaultValue is empty in the case of
   * special parameter such as *args and **kwargs"
   *
   * @generated from field: bool mandatory = 4;
   */
  mandatory: boolean;

  /**
   * The parameter's syntactic role.
   *
   * @generated from field: stardoc_output.FunctionParamRole role = 5;
   */
  role: FunctionParamRole;
};

/**
 * Describes the message stardoc_output.FunctionParamInfo.
 * Use `create(FunctionParamInfoSchema)` to create a new message.
 */
export declare const FunctionParamInfoSchema: GenMessage<FunctionParamInfo>;

/**
 * @generated from message stardoc_output.FunctionReturnInfo
 */
export declare type FunctionReturnInfo = Message<"stardoc_output.FunctionReturnInfo"> & {
  /**
   * The documented return value of the function (if specified in the function's
   * docstring).
   *
   * @generated from field: string doc_string = 1;
   */
  docString: string;
};

/**
 * Describes the message stardoc_output.FunctionReturnInfo.
 * Use `create(FunctionReturnInfoSchema)` to create a new message.
 */
export declare const FunctionReturnInfoSchema: GenMessage<FunctionReturnInfo>;

/**
 * @generated from message stardoc_output.FunctionDeprecationInfo
 */
export declare type FunctionDeprecationInfo = Message<"stardoc_output.FunctionDeprecationInfo"> & {
  /**
   * The documented deprecation of the function (if specified in the function's
   * docstring).
   *
   * @generated from field: string doc_string = 1;
   */
  docString: string;
};

/**
 * Describes the message stardoc_output.FunctionDeprecationInfo.
 * Use `create(FunctionDeprecationInfoSchema)` to create a new message.
 */
export declare const FunctionDeprecationInfoSchema: GenMessage<FunctionDeprecationInfo>;

/**
 * Representation of a Starlark provider field definition, comprised of
 * the field name and provider description.
 *
 * @generated from message stardoc_output.ProviderFieldInfo
 */
export declare type ProviderFieldInfo = Message<"stardoc_output.ProviderFieldInfo"> & {
  /**
   * The name of the field.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The description of the provider.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;
};

/**
 * Describes the message stardoc_output.ProviderFieldInfo.
 * Use `create(ProviderFieldInfoSchema)` to create a new message.
 */
export declare const ProviderFieldInfoSchema: GenMessage<ProviderFieldInfo>;

/**
 * Representation of a Starlark provider definition.
 *
 * @generated from message stardoc_output.ProviderInfo
 */
export declare type ProviderInfo = Message<"stardoc_output.ProviderInfo"> & {
  /**
   * The name under which the provider is made accessible to a user of this
   * module, including any structs it is nested in, for example "foo.FooInfo".
   *
   * @generated from field: string provider_name = 1;
   */
  providerName: string;

  /**
   * The description of the provider.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * The fields of the provider.
   *
   * @generated from field: repeated stardoc_output.ProviderFieldInfo field_info = 3;
   */
  fieldInfo: ProviderFieldInfo[];

  /**
   * The module where and the name under which the provider was originally
   * declared.
   *
   * @generated from field: stardoc_output.OriginKey origin_key = 4;
   */
  originKey?: OriginKey;

  /**
   * The provider's init callback.
   *
   * @generated from field: stardoc_output.StarlarkFunctionInfo init = 5;
   */
  init?: StarlarkFunctionInfo;
};

/**
 * Describes the message stardoc_output.ProviderInfo.
 * Use `create(ProviderInfoSchema)` to create a new message.
 */
export declare const ProviderInfoSchema: GenMessage<ProviderInfo>;

/**
 * Representation of a Starlark aspect definition.
 *
 * @generated from message stardoc_output.AspectInfo
 */
export declare type AspectInfo = Message<"stardoc_output.AspectInfo"> & {
  /**
   * The name under which the aspect is made accessible to a user of this
   * module, including any structs it is nested in, for example
   * "foo.foo_aspect".
   *
   * @generated from field: string aspect_name = 1;
   */
  aspectName: string;

  /**
   * The documentation string of the aspect.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * The rule attributes along which the aspect propagates.
   *
   * @generated from field: repeated string aspect_attribute = 3;
   */
  aspectAttribute: string[];

  /**
   * The attributes of the aspect.
   *
   * @generated from field: repeated stardoc_output.AttributeInfo attribute = 4;
   */
  attribute: AttributeInfo[];

  /**
   * The module where and the name under which the aspect was originally
   * declared.
   *
   * Note: legacy Stardoc (0.5.x and earlier) does not set this field.
   *
   * @generated from field: stardoc_output.OriginKey origin_key = 5;
   */
  originKey?: OriginKey;
};

/**
 * Describes the message stardoc_output.AspectInfo.
 * Use `create(AspectInfoSchema)` to create a new message.
 */
export declare const AspectInfoSchema: GenMessage<AspectInfo>;

/**
 * Representation of a Bazel module extension, i.e. the object returned by
 * calling `module_extension(...)`.
 *
 * Note: legacy Stardoc (0.5.x and earlier) does not emit this message.
 *
 * @generated from message stardoc_output.ModuleExtensionInfo
 */
export declare type ModuleExtensionInfo = Message<"stardoc_output.ModuleExtensionInfo"> & {
  /**
   * The name under which the extension is made accessible to a user of this
   * Starlark module.
   *
   * @generated from field: string extension_name = 1;
   */
  extensionName: string;

  /**
   * The documentation string of the extension.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * The tag classes of the extension.
   *
   * @generated from field: repeated stardoc_output.ModuleExtensionTagClassInfo tag_class = 3;
   */
  tagClass: ModuleExtensionTagClassInfo[];

  /**
   * The Starlark module where the Bazel module extension was originally
   * declared; origin_key.name is currently never set.
   * TODO(arostovtsev): attempt to retrieve the name under which the module
   * extension was originally declared if it was declared as a global.
   *
   * @generated from field: stardoc_output.OriginKey origin_key = 4;
   */
  originKey?: OriginKey;
};

/**
 * Describes the message stardoc_output.ModuleExtensionInfo.
 * Use `create(ModuleExtensionInfoSchema)` to create a new message.
 */
export declare const ModuleExtensionInfoSchema: GenMessage<ModuleExtensionInfo>;

/**
 * Representation of a Bazel module extension tag class.
 *
 * @generated from message stardoc_output.ModuleExtensionTagClassInfo
 */
export declare type ModuleExtensionTagClassInfo = Message<"stardoc_output.ModuleExtensionTagClassInfo"> & {
  /**
   * The name of the tag for this tag class.
   *
   * @generated from field: string tag_name = 1;
   */
  tagName: string;

  /**
   * The documentation string of the tag class.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * The tag class's attributes.
   *
   * @generated from field: repeated stardoc_output.AttributeInfo attribute = 3;
   */
  attribute: AttributeInfo[];
};

/**
 * Describes the message stardoc_output.ModuleExtensionTagClassInfo.
 * Use `create(ModuleExtensionTagClassInfoSchema)` to create a new message.
 */
export declare const ModuleExtensionTagClassInfoSchema: GenMessage<ModuleExtensionTagClassInfo>;

/**
 * Representation of a Bazel repository rule, i.e. the object returned by
 * calling `repository_rule(...)`.
 *
 * Note: legacy Stardoc (0.5.x and earlier) does not emit this message, instead
 * using RuleInfo.
 *
 * @generated from message stardoc_output.RepositoryRuleInfo
 */
export declare type RepositoryRuleInfo = Message<"stardoc_output.RepositoryRuleInfo"> & {
  /**
   * The name under which the repository rule is made accessible to a user of
   * this Starlark module.
   *
   * @generated from field: string rule_name = 1;
   */
  ruleName: string;

  /**
   * The documentation string of the repository rule.
   *
   * @generated from field: string doc_string = 2;
   */
  docString: string;

  /**
   * The attributes of the repository rule.
   *
   * @generated from field: repeated stardoc_output.AttributeInfo attribute = 3;
   */
  attribute: AttributeInfo[];

  /**
   * Environment variables that this repository rule depends on.
   *
   * @generated from field: repeated string environ = 4;
   */
  environ: string[];

  /**
   * The Starlark module where and the name under which the repository rule was
   * originally declared.
   *
   * @generated from field: stardoc_output.OriginKey origin_key = 5;
   */
  originKey?: OriginKey;
};

/**
 * Describes the message stardoc_output.RepositoryRuleInfo.
 * Use `create(RepositoryRuleInfoSchema)` to create a new message.
 */
export declare const RepositoryRuleInfoSchema: GenMessage<RepositoryRuleInfo>;

/**
 * Representation of the origin of a rule, provider, aspect, or function.
 * Intended to be used for building unambiguous cross-references: for example,
 * between an element of a ProviderNameGroup required by a rule attribute and
 * its corresponding ProviderInfo.
 *
 * @generated from message stardoc_output.OriginKey
 */
export declare type OriginKey = Message<"stardoc_output.OriginKey"> & {
  /**
   * The name under which the entity was originally exported. Unset when the
   * entity was not exported in its module.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The display form of the label of the module file in which the entity was
   * originally declared (as seen from the starlark_doc_extract or Stardoc
   * target's repo), or "<native>" for Bazel's built-in entities implemented in
   * Java. Unset when there is no module file (such as for legacy struct
   * providers, when the module is a REPL, or in Bazel's internal tests).
   *
   * @generated from field: string file = 2;
   */
  file: string;
};

/**
 * Describes the message stardoc_output.OriginKey.
 * Use `create(OriginKeySchema)` to create a new message.
 */
export declare const OriginKeySchema: GenMessage<OriginKey>;

/**
 * Representation of a Starlark rule attribute type. These generally
 * have a one-to-one correspondence with functions defined at
 * https://bazel.build/rules/lib/attr.
 *
 * @generated from enum stardoc_output.AttributeType
 */
export enum AttributeType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * A special case of STRING; all rules have exactly one implicit
   * attribute "name" of type NAME.
   *
   * @generated from enum value: NAME = 1;
   */
  NAME = 1,

  /**
   * @generated from enum value: INT = 2;
   */
  INT = 2,

  /**
   * @generated from enum value: LABEL = 3;
   */
  LABEL = 3,

  /**
   * @generated from enum value: STRING = 4;
   */
  STRING = 4,

  /**
   * @generated from enum value: STRING_LIST = 5;
   */
  STRING_LIST = 5,

  /**
   * @generated from enum value: INT_LIST = 6;
   */
  INT_LIST = 6,

  /**
   * @generated from enum value: LABEL_LIST = 7;
   */
  LABEL_LIST = 7,

  /**
   * @generated from enum value: BOOLEAN = 8;
   */
  BOOLEAN = 8,

  /**
   * @generated from enum value: LABEL_STRING_DICT = 9;
   */
  LABEL_STRING_DICT = 9,

  /**
   * @generated from enum value: STRING_DICT = 10;
   */
  STRING_DICT = 10,

  /**
   * @generated from enum value: STRING_LIST_DICT = 11;
   */
  STRING_LIST_DICT = 11,

  /**
   * @generated from enum value: OUTPUT = 12;
   */
  OUTPUT = 12,

  /**
   * @generated from enum value: OUTPUT_LIST = 13;
   */
  OUTPUT_LIST = 13,

  /**
   * @generated from enum value: LABEL_DICT_UNARY = 14;
   */
  LABEL_DICT_UNARY = 14,
}

/**
 * Describes the enum stardoc_output.AttributeType.
 */
export declare const AttributeTypeSchema: GenEnum<AttributeType>;

/**
 * Representation of the syntactic role of a given function parameter.
 *
 * @generated from enum stardoc_output.FunctionParamRole
 */
export enum FunctionParamRole {
  /**
   * @generated from enum value: PARAM_ROLE_UNSPECIFIED = 0;
   */
  PARAM_ROLE_UNSPECIFIED = 0,

  /**
   * An ordinary parameter which may be used as a positional or by keyword.
   *
   * @generated from enum value: PARAM_ROLE_ORDINARY = 1;
   */
  PARAM_ROLE_ORDINARY = 1,

  /**
   * A positional-only parameter; such parameters cannot be defined in pure
   * Starlark code, but exist in some natively-defined functions.
   *
   * @generated from enum value: PARAM_ROLE_POSITIONAL_ONLY = 2;
   */
  PARAM_ROLE_POSITIONAL_ONLY = 2,

  /**
   * A keyword-only parameter, i.e. a non-vararg/kwarg parameter that follows
   * `*` or `*args` in the function's declaration.
   *
   * @generated from enum value: PARAM_ROLE_KEYWORD_ONLY = 3;
   */
  PARAM_ROLE_KEYWORD_ONLY = 3,

  /**
   * Residual varargs, typically `*args` in the function's declaration.
   *
   * @generated from enum value: PARAM_ROLE_VARARGS = 4;
   */
  PARAM_ROLE_VARARGS = 4,

  /**
   * Residual keyword arguments, typically `**kwargs` in the function's
   * declaration.
   *
   * @generated from enum value: PARAM_ROLE_KWARGS = 5;
   */
  PARAM_ROLE_KWARGS = 5,
}

/**
 * Describes the enum stardoc_output.FunctionParamRole.
 */
export declare const FunctionParamRoleSchema: GenEnum<FunctionParamRole>;

