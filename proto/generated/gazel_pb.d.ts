// @generated by protoc-gen-es v2.9.0 with parameter "import_extension=js"
// @generated from file gazel.proto (package gazel.api.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { Rule } from "./build_pb.js";

/**
 * Describes the file gazel.proto.
 */
export declare const file_gazel: GenFile;

/**
 * @generated from message gazel.api.v1.WorkspaceInfo
 */
export declare type WorkspaceInfo = Message<"gazel.api.v1.WorkspaceInfo"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: bool valid = 3;
   */
  valid: boolean;

  /**
   * @generated from field: string error = 4;
   */
  error: string;

  /**
   * @generated from field: repeated string packages = 5;
   */
  packages: string[];

  /**
   * @generated from field: int32 target_count = 6;
   */
  targetCount: number;

  /**
   * @generated from field: int32 file_count = 7;
   */
  fileCount: number;

  /**
   * Version from MODULE.bazel or WORKSPACE
   *
   * @generated from field: string workspace_version = 8;
   */
  workspaceVersion: string;
};

/**
 * Describes the message gazel.api.v1.WorkspaceInfo.
 * Use `create(WorkspaceInfoSchema)` to create a new message.
 */
export declare const WorkspaceInfoSchema: GenMessage<WorkspaceInfo>;

/**
 * @generated from message gazel.api.v1.BazelInfo
 */
export declare type BazelInfo = Message<"gazel.api.v1.BazelInfo"> & {
  /**
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * @generated from field: string release = 2;
   */
  release: string;

  /**
   * @generated from field: string workspace = 3;
   */
  workspace: string;

  /**
   * @generated from field: string execution_root = 4;
   */
  executionRoot: string;

  /**
   * @generated from field: string output_base = 5;
   */
  outputBase: string;

  /**
   * @generated from field: string output_path = 6;
   */
  outputPath: string;

  /**
   * @generated from field: string server_pid = 7;
   */
  serverPid: string;

  /**
   * @generated from field: string server_log = 8;
   */
  serverLog: string;

  /**
   * @generated from field: string command_log = 9;
   */
  commandLog: string;

  /**
   * @generated from field: bool used_heap_size_after_gc = 10;
   */
  usedHeapSizeAfterGc: boolean;

  /**
   * @generated from field: string max_heap_size = 11;
   */
  maxHeapSize: string;

  /**
   * @generated from field: string committed_heap_size = 12;
   */
  committedHeapSize: string;
};

/**
 * Describes the message gazel.api.v1.BazelInfo.
 * Use `create(BazelInfoSchema)` to create a new message.
 */
export declare const BazelInfoSchema: GenMessage<BazelInfo>;

/**
 * @generated from message gazel.api.v1.BazelAttribute
 */
export declare type BazelAttribute = Message<"gazel.api.v1.BazelAttribute"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: optional string string_value = 3;
   */
  stringValue?: string;

  /**
   * @generated from field: repeated string string_list_value = 4;
   */
  stringListValue: string[];

  /**
   * @generated from field: optional int64 int_value = 5;
   */
  intValue?: bigint;

  /**
   * @generated from field: optional bool boolean_value = 6;
   */
  booleanValue?: boolean;

  /**
   * @generated from field: repeated gazel.api.v1.StringDictEntry string_dict_value = 7;
   */
  stringDictValue: StringDictEntry[];

  /**
   * @generated from field: bool explicitly_specified = 8;
   */
  explicitlySpecified: boolean;

  /**
   * @generated from field: bool nodep = 9;
   */
  nodep: boolean;
};

/**
 * Describes the message gazel.api.v1.BazelAttribute.
 * Use `create(BazelAttributeSchema)` to create a new message.
 */
export declare const BazelAttributeSchema: GenMessage<BazelAttribute>;

/**
 * @generated from message gazel.api.v1.StringDictEntry
 */
export declare type StringDictEntry = Message<"gazel.api.v1.StringDictEntry"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message gazel.api.v1.StringDictEntry.
 * Use `create(StringDictEntrySchema)` to create a new message.
 */
export declare const StringDictEntrySchema: GenMessage<StringDictEntry>;

/**
 * @generated from message gazel.api.v1.BazelTarget
 */
export declare type BazelTarget = Message<"gazel.api.v1.BazelTarget"> & {
  /**
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * @generated from field: string package = 3;
   */
  package: string;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];

  /**
   * @generated from field: repeated string deps = 6;
   */
  deps: string[];

  /**
   * @generated from field: repeated string srcs = 7;
   */
  srcs: string[];

  /**
   * @generated from field: repeated gazel.api.v1.BazelAttribute attributes = 8;
   */
  attributes: BazelAttribute[];

  /**
   * @generated from field: string visibility = 9;
   */
  visibility: string;

  /**
   * @generated from field: bool testonly = 10;
   */
  testonly: boolean;

  /**
   * @generated from field: string location = 11;
   */
  location: string;
};

/**
 * Describes the message gazel.api.v1.BazelTarget.
 * Use `create(BazelTargetSchema)` to create a new message.
 */
export declare const BazelTargetSchema: GenMessage<BazelTarget>;

/**
 * @generated from message gazel.api.v1.BuildFile
 */
export declare type BuildFile = Message<"gazel.api.v1.BuildFile"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string package = 2;
   */
  package: string;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 3;
   */
  targets: BazelTarget[];

  /**
   * @generated from field: int32 line_count = 4;
   */
  lineCount: number;

  /**
   * @generated from field: int64 size_bytes = 5;
   */
  sizeBytes: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp modified_time = 6;
   */
  modifiedTime?: Timestamp;
};

/**
 * Describes the message gazel.api.v1.BuildFile.
 * Use `create(BuildFileSchema)` to create a new message.
 */
export declare const BuildFileSchema: GenMessage<BuildFile>;

/**
 * @generated from message gazel.api.v1.QueryTemplate
 */
export declare type QueryTemplate = Message<"gazel.api.v1.QueryTemplate"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string template = 4;
   */
  template: string;

  /**
   * @generated from field: repeated string parameters = 5;
   */
  parameters: string[];

  /**
   * @generated from field: string category = 6;
   */
  category: string;

  /**
   * "query", "aquery", or "cquery"
   *
   * @generated from field: string query_type = 7;
   */
  queryType: string;

  /**
   * Recommended output format for this template
   *
   * @generated from field: string output_format = 8;
   */
  outputFormat: string;
};

/**
 * Describes the message gazel.api.v1.QueryTemplate.
 * Use `create(QueryTemplateSchema)` to create a new message.
 */
export declare const QueryTemplateSchema: GenMessage<QueryTemplate>;

/**
 * @generated from message gazel.api.v1.SavedQuery
 */
export declare type SavedQuery = Message<"gazel.api.v1.SavedQuery"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string query = 3;
   */
  query: string;

  /**
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;
};

/**
 * Describes the message gazel.api.v1.SavedQuery.
 * Use `create(SavedQuerySchema)` to create a new message.
 */
export declare const SavedQuerySchema: GenMessage<SavedQuery>;

/**
 * @generated from message gazel.api.v1.CommandHistory
 */
export declare type CommandHistory = Message<"gazel.api.v1.CommandHistory"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string command = 2;
   */
  command: string;

  /**
   * @generated from field: repeated string args = 3;
   */
  args: string[];

  /**
   * @generated from field: bool success = 4;
   */
  success: boolean;

  /**
   * @generated from field: string output = 5;
   */
  output: string;

  /**
   * @generated from field: string error = 6;
   */
  error: string;

  /**
   * @generated from field: google.protobuf.Timestamp executed_at = 7;
   */
  executedAt?: Timestamp;

  /**
   * @generated from field: int64 duration_ms = 8;
   */
  durationMs: bigint;
};

/**
 * Describes the message gazel.api.v1.CommandHistory.
 * Use `create(CommandHistorySchema)` to create a new message.
 */
export declare const CommandHistorySchema: GenMessage<CommandHistory>;

/**
 * @generated from message gazel.api.v1.Module
 */
export declare type Module = Message<"gazel.api.v1.Module"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * @generated from field: gazel.api.v1.Location location = 4;
   */
  location?: Location;

  /**
   * @generated from field: int32 compatibility_level = 5;
   */
  compatibilityLevel: number;

  /**
   * @generated from field: string repo_name = 6;
   */
  repoName: string;

  /**
   * @generated from field: repeated string bazel_compatibility = 7;
   */
  bazelCompatibility: string[];

  /**
   * @generated from field: bool module_rule_exports_all_rules = 8;
   */
  moduleRuleExportsAllRules: boolean;

  /**
   * @generated from field: repeated string tags = 9;
   */
  tags: string[];

  /**
   * @generated from field: repeated gazel.api.v1.Dependency dependencies = 10;
   */
  dependencies: Dependency[];

  /**
   * @generated from field: repeated gazel.api.v1.Dependency resolved_dependencies = 11;
   */
  resolvedDependencies: Dependency[];

  /**
   * @generated from field: repeated gazel.api.v1.ExtensionUsage extension_usages = 12;
   */
  extensionUsages: ExtensionUsage[];

  /**
   * @generated from field: int32 dependency_count = 13;
   */
  dependencyCount: number;

  /**
   * @generated from field: int32 extension_count = 14;
   */
  extensionCount: number;
};

/**
 * Describes the message gazel.api.v1.Module.
 * Use `create(ModuleSchema)` to create a new message.
 */
export declare const ModuleSchema: GenMessage<Module>;

/**
 * @generated from message gazel.api.v1.Location
 */
export declare type Location = Message<"gazel.api.v1.Location"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: int32 line = 2;
   */
  line: number;

  /**
   * @generated from field: int32 column = 3;
   */
  column: number;
};

/**
 * Describes the message gazel.api.v1.Location.
 * Use `create(LocationSchema)` to create a new message.
 */
export declare const LocationSchema: GenMessage<Location>;

/**
 * @generated from message gazel.api.v1.Dependency
 */
export declare type Dependency = Message<"gazel.api.v1.Dependency"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * @generated from field: bool dev_dependency = 4;
   */
  devDependency: boolean;

  /**
   * @generated from field: string registry = 5;
   */
  registry: string;
};

/**
 * Describes the message gazel.api.v1.Dependency.
 * Use `create(DependencySchema)` to create a new message.
 */
export declare const DependencySchema: GenMessage<Dependency>;

/**
 * @generated from message gazel.api.v1.ExtensionUsage
 */
export declare type ExtensionUsage = Message<"gazel.api.v1.ExtensionUsage"> & {
  /**
   * @generated from field: string extension_bzl_file = 1;
   */
  extensionBzlFile: string;

  /**
   * @generated from field: string extension_name = 2;
   */
  extensionName: string;

  /**
   * @generated from field: gazel.api.v1.Location location = 3;
   */
  location?: Location;

  /**
   * @generated from field: map<string, string> imports = 4;
   */
  imports: { [key: string]: string };

  /**
   * @generated from field: bool dev_dependency = 5;
   */
  devDependency: boolean;

  /**
   * @generated from field: bool isolate = 6;
   */
  isolate: boolean;
};

/**
 * Describes the message gazel.api.v1.ExtensionUsage.
 * Use `create(ExtensionUsageSchema)` to create a new message.
 */
export declare const ExtensionUsageSchema: GenMessage<ExtensionUsage>;

/**
 * @generated from message gazel.api.v1.ModuleDependency
 */
export declare type ModuleDependency = Message<"gazel.api.v1.ModuleDependency"> & {
  /**
   * @generated from field: string from = 1;
   */
  from: string;

  /**
   * @generated from field: string to = 2;
   */
  to: string;

  /**
   * "direct", "dev", "indirect"
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: string version = 4;
   */
  version: string;
};

/**
 * Describes the message gazel.api.v1.ModuleDependency.
 * Use `create(ModuleDependencySchema)` to create a new message.
 */
export declare const ModuleDependencySchema: GenMessage<ModuleDependency>;

/**
 * Workspace Service Messages
 *
 * @generated from message gazel.api.v1.GetWorkspaceInfoRequest
 */
export declare type GetWorkspaceInfoRequest = Message<"gazel.api.v1.GetWorkspaceInfoRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceInfoRequest.
 * Use `create(GetWorkspaceInfoRequestSchema)` to create a new message.
 */
export declare const GetWorkspaceInfoRequestSchema: GenMessage<GetWorkspaceInfoRequest>;

/**
 * @generated from message gazel.api.v1.GetWorkspaceInfoResponse
 */
export declare type GetWorkspaceInfoResponse = Message<"gazel.api.v1.GetWorkspaceInfoResponse"> & {
  /**
   * @generated from field: gazel.api.v1.WorkspaceInfo info = 1;
   */
  info?: WorkspaceInfo;
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceInfoResponse.
 * Use `create(GetWorkspaceInfoResponseSchema)` to create a new message.
 */
export declare const GetWorkspaceInfoResponseSchema: GenMessage<GetWorkspaceInfoResponse>;

/**
 * @generated from message gazel.api.v1.GetCurrentWorkspaceRequest
 */
export declare type GetCurrentWorkspaceRequest = Message<"gazel.api.v1.GetCurrentWorkspaceRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetCurrentWorkspaceRequest.
 * Use `create(GetCurrentWorkspaceRequestSchema)` to create a new message.
 */
export declare const GetCurrentWorkspaceRequestSchema: GenMessage<GetCurrentWorkspaceRequest>;

/**
 * @generated from message gazel.api.v1.GetCurrentWorkspaceResponse
 */
export declare type GetCurrentWorkspaceResponse = Message<"gazel.api.v1.GetCurrentWorkspaceResponse"> & {
  /**
   * @generated from field: bool configured = 1;
   */
  configured: boolean;

  /**
   * @generated from field: string workspace = 2;
   */
  workspace: string;

  /**
   * @generated from field: bool valid = 3;
   */
  valid: boolean;

  /**
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message gazel.api.v1.GetCurrentWorkspaceResponse.
 * Use `create(GetCurrentWorkspaceResponseSchema)` to create a new message.
 */
export declare const GetCurrentWorkspaceResponseSchema: GenMessage<GetCurrentWorkspaceResponse>;

/**
 * @generated from message gazel.api.v1.ScanWorkspacesRequest
 */
export declare type ScanWorkspacesRequest = Message<"gazel.api.v1.ScanWorkspacesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesRequest.
 * Use `create(ScanWorkspacesRequestSchema)` to create a new message.
 */
export declare const ScanWorkspacesRequestSchema: GenMessage<ScanWorkspacesRequest>;

/**
 * @generated from message gazel.api.v1.ScanWorkspacesResponse
 */
export declare type ScanWorkspacesResponse = Message<"gazel.api.v1.ScanWorkspacesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.ScanWorkspacesResponse.Workspace workspaces = 1;
   */
  workspaces: ScanWorkspacesResponse_Workspace[];
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesResponse.
 * Use `create(ScanWorkspacesResponseSchema)` to create a new message.
 */
export declare const ScanWorkspacesResponseSchema: GenMessage<ScanWorkspacesResponse>;

/**
 * @generated from message gazel.api.v1.ScanWorkspacesResponse.Workspace
 */
export declare type ScanWorkspacesResponse_Workspace = Message<"gazel.api.v1.ScanWorkspacesResponse.Workspace"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * "current", "parent", "home", "discovered"
   *
   * @generated from field: string type = 3;
   */
  type: string;
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesResponse.Workspace.
 * Use `create(ScanWorkspacesResponse_WorkspaceSchema)` to create a new message.
 */
export declare const ScanWorkspacesResponse_WorkspaceSchema: GenMessage<ScanWorkspacesResponse_Workspace>;

/**
 * @generated from message gazel.api.v1.SwitchWorkspaceRequest
 */
export declare type SwitchWorkspaceRequest = Message<"gazel.api.v1.SwitchWorkspaceRequest"> & {
  /**
   * @generated from field: string workspace = 1;
   */
  workspace: string;
};

/**
 * Describes the message gazel.api.v1.SwitchWorkspaceRequest.
 * Use `create(SwitchWorkspaceRequestSchema)` to create a new message.
 */
export declare const SwitchWorkspaceRequestSchema: GenMessage<SwitchWorkspaceRequest>;

/**
 * @generated from message gazel.api.v1.SwitchWorkspaceResponse
 */
export declare type SwitchWorkspaceResponse = Message<"gazel.api.v1.SwitchWorkspaceResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string workspace = 2;
   */
  workspace: string;

  /**
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message gazel.api.v1.SwitchWorkspaceResponse.
 * Use `create(SwitchWorkspaceResponseSchema)` to create a new message.
 */
export declare const SwitchWorkspaceResponseSchema: GenMessage<SwitchWorkspaceResponse>;

/**
 * @generated from message gazel.api.v1.GetWorkspaceFilesRequest
 */
export declare type GetWorkspaceFilesRequest = Message<"gazel.api.v1.GetWorkspaceFilesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceFilesRequest.
 * Use `create(GetWorkspaceFilesRequestSchema)` to create a new message.
 */
export declare const GetWorkspaceFilesRequestSchema: GenMessage<GetWorkspaceFilesRequest>;

/**
 * @generated from message gazel.api.v1.GetWorkspaceFilesResponse
 */
export declare type GetWorkspaceFilesResponse = Message<"gazel.api.v1.GetWorkspaceFilesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.GetWorkspaceFilesResponse.WorkspaceFile files = 1;
   */
  files: GetWorkspaceFilesResponse_WorkspaceFile[];
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceFilesResponse.
 * Use `create(GetWorkspaceFilesResponseSchema)` to create a new message.
 */
export declare const GetWorkspaceFilesResponseSchema: GenMessage<GetWorkspaceFilesResponse>;

/**
 * @generated from message gazel.api.v1.GetWorkspaceFilesResponse.WorkspaceFile
 */
export declare type GetWorkspaceFilesResponse_WorkspaceFile = Message<"gazel.api.v1.GetWorkspaceFilesResponse.WorkspaceFile"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * "workspace", "build", "module"
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: int32 targets = 4;
   */
  targets: number;

  /**
   * @generated from field: int64 last_modified = 5;
   */
  lastModified: bigint;
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceFilesResponse.WorkspaceFile.
 * Use `create(GetWorkspaceFilesResponse_WorkspaceFileSchema)` to create a new message.
 */
export declare const GetWorkspaceFilesResponse_WorkspaceFileSchema: GenMessage<GetWorkspaceFilesResponse_WorkspaceFile>;

/**
 * @generated from message gazel.api.v1.GetBazelInfoRequest
 */
export declare type GetBazelInfoRequest = Message<"gazel.api.v1.GetBazelInfoRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetBazelInfoRequest.
 * Use `create(GetBazelInfoRequestSchema)` to create a new message.
 */
export declare const GetBazelInfoRequestSchema: GenMessage<GetBazelInfoRequest>;

/**
 * @generated from message gazel.api.v1.GetBazelInfoResponse
 */
export declare type GetBazelInfoResponse = Message<"gazel.api.v1.GetBazelInfoResponse"> & {
  /**
   * @generated from field: gazel.api.v1.BazelInfo info = 1;
   */
  info?: BazelInfo;
};

/**
 * Describes the message gazel.api.v1.GetBazelInfoResponse.
 * Use `create(GetBazelInfoResponseSchema)` to create a new message.
 */
export declare const GetBazelInfoResponseSchema: GenMessage<GetBazelInfoResponse>;

/**
 * Target Service Messages
 *
 * @generated from message gazel.api.v1.ListTargetsRequest
 */
export declare type ListTargetsRequest = Message<"gazel.api.v1.ListTargetsRequest"> & {
  /**
   * @generated from field: string pattern = 1;
   */
  pattern: string;

  /**
   * @generated from field: string format = 2;
   */
  format: string;
};

/**
 * Describes the message gazel.api.v1.ListTargetsRequest.
 * Use `create(ListTargetsRequestSchema)` to create a new message.
 */
export declare const ListTargetsRequestSchema: GenMessage<ListTargetsRequest>;

/**
 * @generated from message gazel.api.v1.ListTargetsResponse
 */
export declare type ListTargetsResponse = Message<"gazel.api.v1.ListTargetsResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.ListTargetsResponse.data
   */
  data: {
    /**
     * @generated from field: gazel.api.v1.BazelTarget target = 1;
     */
    value: BazelTarget;
    case: "target";
  } | {
    /**
     * @generated from field: gazel.api.v1.ListTargetsComplete complete = 2;
     */
    value: ListTargetsComplete;
    case: "complete";
  } | {
    /**
     * @generated from field: string error = 3;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.ListTargetsResponse.
 * Use `create(ListTargetsResponseSchema)` to create a new message.
 */
export declare const ListTargetsResponseSchema: GenMessage<ListTargetsResponse>;

/**
 * @generated from message gazel.api.v1.ListTargetsComplete
 */
export declare type ListTargetsComplete = Message<"gazel.api.v1.ListTargetsComplete"> & {
  /**
   * @generated from field: int32 total = 1;
   */
  total: number;
};

/**
 * Describes the message gazel.api.v1.ListTargetsComplete.
 * Use `create(ListTargetsCompleteSchema)` to create a new message.
 */
export declare const ListTargetsCompleteSchema: GenMessage<ListTargetsComplete>;

/**
 * @generated from message gazel.api.v1.TargetList
 */
export declare type TargetList = Message<"gazel.api.v1.TargetList"> & {
  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 1;
   */
  targets: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.TargetList.
 * Use `create(TargetListSchema)` to create a new message.
 */
export declare const TargetListSchema: GenMessage<TargetList>;

/**
 * @generated from message gazel.api.v1.GetTargetRequest
 */
export declare type GetTargetRequest = Message<"gazel.api.v1.GetTargetRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetTargetRequest.
 * Use `create(GetTargetRequestSchema)` to create a new message.
 */
export declare const GetTargetRequestSchema: GenMessage<GetTargetRequest>;

/**
 * @generated from message gazel.api.v1.GetTargetResponse
 */
export declare type GetTargetResponse = Message<"gazel.api.v1.GetTargetResponse"> & {
  /**
   * @generated from field: gazel.api.v1.BazelTarget target = 1;
   */
  target?: BazelTarget;
};

/**
 * Describes the message gazel.api.v1.GetTargetResponse.
 * Use `create(GetTargetResponseSchema)` to create a new message.
 */
export declare const GetTargetResponseSchema: GenMessage<GetTargetResponse>;

/**
 * @generated from message gazel.api.v1.GetTargetDependenciesRequest
 */
export declare type GetTargetDependenciesRequest = Message<"gazel.api.v1.GetTargetDependenciesRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 depth = 2;
   */
  depth: number;
};

/**
 * Describes the message gazel.api.v1.GetTargetDependenciesRequest.
 * Use `create(GetTargetDependenciesRequestSchema)` to create a new message.
 */
export declare const GetTargetDependenciesRequestSchema: GenMessage<GetTargetDependenciesRequest>;

/**
 * @generated from message gazel.api.v1.GetTargetDependenciesResponse
 */
export declare type GetTargetDependenciesResponse = Message<"gazel.api.v1.GetTargetDependenciesResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 depth = 2;
   */
  depth: number;

  /**
   * @generated from field: int32 total = 3;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget dependencies = 4;
   */
  dependencies: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.GetTargetDependenciesResponse.
 * Use `create(GetTargetDependenciesResponseSchema)` to create a new message.
 */
export declare const GetTargetDependenciesResponseSchema: GenMessage<GetTargetDependenciesResponse>;

/**
 * @generated from message gazel.api.v1.GetTargetOutputsRequest
 */
export declare type GetTargetOutputsRequest = Message<"gazel.api.v1.GetTargetOutputsRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetTargetOutputsRequest.
 * Use `create(GetTargetOutputsRequestSchema)` to create a new message.
 */
export declare const GetTargetOutputsRequestSchema: GenMessage<GetTargetOutputsRequest>;

/**
 * @generated from message gazel.api.v1.GetTargetOutputsResponse
 */
export declare type GetTargetOutputsResponse = Message<"gazel.api.v1.GetTargetOutputsResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string outputs = 2;
   */
  outputs: string[];

  /**
   * @generated from field: int32 count = 3;
   */
  count: number;
};

/**
 * Describes the message gazel.api.v1.GetTargetOutputsResponse.
 * Use `create(GetTargetOutputsResponseSchema)` to create a new message.
 */
export declare const GetTargetOutputsResponseSchema: GenMessage<GetTargetOutputsResponse>;

/**
 * @generated from message gazel.api.v1.GetReverseDependenciesRequest
 */
export declare type GetReverseDependenciesRequest = Message<"gazel.api.v1.GetReverseDependenciesRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetReverseDependenciesRequest.
 * Use `create(GetReverseDependenciesRequestSchema)` to create a new message.
 */
export declare const GetReverseDependenciesRequestSchema: GenMessage<GetReverseDependenciesRequest>;

/**
 * @generated from message gazel.api.v1.GetReverseDependenciesResponse
 */
export declare type GetReverseDependenciesResponse = Message<"gazel.api.v1.GetReverseDependenciesResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget dependencies = 3;
   */
  dependencies: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.GetReverseDependenciesResponse.
 * Use `create(GetReverseDependenciesResponseSchema)` to create a new message.
 */
export declare const GetReverseDependenciesResponseSchema: GenMessage<GetReverseDependenciesResponse>;

/**
 * @generated from message gazel.api.v1.GetOutputConsumersRequest
 */
export declare type GetOutputConsumersRequest = Message<"gazel.api.v1.GetOutputConsumersRequest"> & {
  /**
   * @generated from field: string output = 1;
   */
  output: string;

  /**
   * The target that produces this output
   *
   * @generated from field: string producing_target = 2;
   */
  producingTarget: string;
};

/**
 * Describes the message gazel.api.v1.GetOutputConsumersRequest.
 * Use `create(GetOutputConsumersRequestSchema)` to create a new message.
 */
export declare const GetOutputConsumersRequestSchema: GenMessage<GetOutputConsumersRequest>;

/**
 * @generated from message gazel.api.v1.GetOutputConsumersResponse
 */
export declare type GetOutputConsumersResponse = Message<"gazel.api.v1.GetOutputConsumersResponse"> & {
  /**
   * @generated from field: string output = 1;
   */
  output: string;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget consumers = 3;
   */
  consumers: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.GetOutputConsumersResponse.
 * Use `create(GetOutputConsumersResponseSchema)` to create a new message.
 */
export declare const GetOutputConsumersResponseSchema: GenMessage<GetOutputConsumersResponse>;

/**
 * @generated from message gazel.api.v1.SearchTargetsRequest
 */
export declare type SearchTargetsRequest = Message<"gazel.api.v1.SearchTargetsRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string package = 3;
   */
  package: string;
};

/**
 * Describes the message gazel.api.v1.SearchTargetsRequest.
 * Use `create(SearchTargetsRequestSchema)` to create a new message.
 */
export declare const SearchTargetsRequestSchema: GenMessage<SearchTargetsRequest>;

/**
 * @generated from message gazel.api.v1.SearchTargetsResponse
 */
export declare type SearchTargetsResponse = Message<"gazel.api.v1.SearchTargetsResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.SearchTargetsResponse.data
   */
  data: {
    /**
     * @generated from field: gazel.api.v1.BazelTarget target = 1;
     */
    value: BazelTarget;
    case: "target";
  } | {
    /**
     * @generated from field: gazel.api.v1.SearchTargetsComplete complete = 2;
     */
    value: SearchTargetsComplete;
    case: "complete";
  } | {
    /**
     * @generated from field: string error = 3;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.SearchTargetsResponse.
 * Use `create(SearchTargetsResponseSchema)` to create a new message.
 */
export declare const SearchTargetsResponseSchema: GenMessage<SearchTargetsResponse>;

/**
 * @generated from message gazel.api.v1.SearchTargetsComplete
 */
export declare type SearchTargetsComplete = Message<"gazel.api.v1.SearchTargetsComplete"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;
};

/**
 * Describes the message gazel.api.v1.SearchTargetsComplete.
 * Use `create(SearchTargetsCompleteSchema)` to create a new message.
 */
export declare const SearchTargetsCompleteSchema: GenMessage<SearchTargetsComplete>;

/**
 * Query Service Messages
 *
 * @generated from message gazel.api.v1.ExecuteQueryRequest
 */
export declare type ExecuteQueryRequest = Message<"gazel.api.v1.ExecuteQueryRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;

  /**
   * "query", "aquery", or "cquery"
   *
   * @generated from field: string query_type = 3;
   */
  queryType: string;
};

/**
 * Describes the message gazel.api.v1.ExecuteQueryRequest.
 * Use `create(ExecuteQueryRequestSchema)` to create a new message.
 */
export declare const ExecuteQueryRequestSchema: GenMessage<ExecuteQueryRequest>;

/**
 * @generated from message gazel.api.v1.ExecuteQueryResponse
 */
export declare type ExecuteQueryResponse = Message<"gazel.api.v1.ExecuteQueryResponse"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;

  /**
   * @generated from field: gazel.api.v1.QueryResult result = 3;
   */
  result?: QueryResult;

  /**
   * @generated from field: string raw = 4;
   */
  raw: string;
};

/**
 * Describes the message gazel.api.v1.ExecuteQueryResponse.
 * Use `create(ExecuteQueryResponseSchema)` to create a new message.
 */
export declare const ExecuteQueryResponseSchema: GenMessage<ExecuteQueryResponse>;

/**
 * @generated from message gazel.api.v1.QueryResult
 */
export declare type QueryResult = Message<"gazel.api.v1.QueryResult"> & {
  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 1;
   */
  targets: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.QueryResult.
 * Use `create(QueryResultSchema)` to create a new message.
 */
export declare const QueryResultSchema: GenMessage<QueryResult>;

/**
 * @generated from message gazel.api.v1.StreamQueryRequest
 */
export declare type StreamQueryRequest = Message<"gazel.api.v1.StreamQueryRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;

  /**
   * @generated from field: bool parse_xml = 3;
   */
  parseXml: boolean;

  /**
   * "query", "aquery", or "cquery"
   *
   * @generated from field: string query_type = 4;
   */
  queryType: string;
};

/**
 * Describes the message gazel.api.v1.StreamQueryRequest.
 * Use `create(StreamQueryRequestSchema)` to create a new message.
 */
export declare const StreamQueryRequestSchema: GenMessage<StreamQueryRequest>;

/**
 * @generated from message gazel.api.v1.StreamQueryResponse
 */
export declare type StreamQueryResponse = Message<"gazel.api.v1.StreamQueryResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.StreamQueryResponse.data
   */
  data: {
    /**
     * @generated from field: gazel.api.v1.BazelTarget target = 1;
     */
    value: BazelTarget;
    case: "target";
  } | {
    /**
     * @generated from field: string raw_line = 2;
     */
    value: string;
    case: "rawLine";
  } | {
    /**
     * @generated from field: string error = 3;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.StreamQueryResponse.
 * Use `create(StreamQueryResponseSchema)` to create a new message.
 */
export declare const StreamQueryResponseSchema: GenMessage<StreamQueryResponse>;

/**
 * Command Service Messages
 *
 * @generated from message gazel.api.v1.BuildTargetRequest
 */
export declare type BuildTargetRequest = Message<"gazel.api.v1.BuildTargetRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[];

  /**
   * "build", "test", or "run" (default: "build")
   *
   * @generated from field: string command = 3;
   */
  command: string;
};

/**
 * Describes the message gazel.api.v1.BuildTargetRequest.
 * Use `create(BuildTargetRequestSchema)` to create a new message.
 */
export declare const BuildTargetRequestSchema: GenMessage<BuildTargetRequest>;

/**
 * @generated from message gazel.api.v1.BuildTargetResponse
 */
export declare type BuildTargetResponse = Message<"gazel.api.v1.BuildTargetResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string output = 2;
   */
  output: string;

  /**
   * @generated from field: string stderr = 3;
   */
  stderr: string;

  /**
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message gazel.api.v1.BuildTargetResponse.
 * Use `create(BuildTargetResponseSchema)` to create a new message.
 */
export declare const BuildTargetResponseSchema: GenMessage<BuildTargetResponse>;

/**
 * @generated from message gazel.api.v1.StreamBuildRequest
 */
export declare type StreamBuildRequest = Message<"gazel.api.v1.StreamBuildRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[];
};

/**
 * Describes the message gazel.api.v1.StreamBuildRequest.
 * Use `create(StreamBuildRequestSchema)` to create a new message.
 */
export declare const StreamBuildRequestSchema: GenMessage<StreamBuildRequest>;

/**
 * @generated from message gazel.api.v1.StreamBuildResponse
 */
export declare type StreamBuildResponse = Message<"gazel.api.v1.StreamBuildResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.StreamBuildResponse.event
   */
  event: {
    /**
     * @generated from field: string output = 1;
     */
    value: string;
    case: "output";
  } | {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: gazel.api.v1.BuildProgress progress = 3;
     */
    value: BuildProgress;
    case: "progress";
  } | {
    /**
     * @generated from field: gazel.api.v1.BuildComplete complete = 4;
     */
    value: BuildComplete;
    case: "complete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.StreamBuildResponse.
 * Use `create(StreamBuildResponseSchema)` to create a new message.
 */
export declare const StreamBuildResponseSchema: GenMessage<StreamBuildResponse>;

/**
 * @generated from message gazel.api.v1.BuildProgress
 */
export declare type BuildProgress = Message<"gazel.api.v1.BuildProgress"> & {
  /**
   * @generated from field: int32 actions_completed = 1;
   */
  actionsCompleted: number;

  /**
   * @generated from field: int32 actions_total = 2;
   */
  actionsTotal: number;

  /**
   * @generated from field: string current_action = 3;
   */
  currentAction: string;
};

/**
 * Describes the message gazel.api.v1.BuildProgress.
 * Use `create(BuildProgressSchema)` to create a new message.
 */
export declare const BuildProgressSchema: GenMessage<BuildProgress>;

/**
 * @generated from message gazel.api.v1.BuildComplete
 */
export declare type BuildComplete = Message<"gazel.api.v1.BuildComplete"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: int32 exit_code = 2;
   */
  exitCode: number;

  /**
   * @generated from field: int64 duration_ms = 3;
   */
  durationMs: bigint;
};

/**
 * Describes the message gazel.api.v1.BuildComplete.
 * Use `create(BuildCompleteSchema)` to create a new message.
 */
export declare const BuildCompleteSchema: GenMessage<BuildComplete>;

/**
 * Module Service Messages
 *
 * @generated from message gazel.api.v1.GetModuleGraphRequest
 */
export declare type GetModuleGraphRequest = Message<"gazel.api.v1.GetModuleGraphRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphRequest.
 * Use `create(GetModuleGraphRequestSchema)` to create a new message.
 */
export declare const GetModuleGraphRequestSchema: GenMessage<GetModuleGraphRequest>;

/**
 * @generated from message gazel.api.v1.GetModuleGraphResponse
 */
export declare type GetModuleGraphResponse = Message<"gazel.api.v1.GetModuleGraphResponse"> & {
  /**
   * @generated from field: string root = 1;
   */
  root: string;

  /**
   * @generated from field: repeated gazel.api.v1.Module modules = 2;
   */
  modules: Module[];

  /**
   * @generated from field: repeated gazel.api.v1.ModuleDependency dependencies = 3;
   */
  dependencies: ModuleDependency[];

  /**
   * @generated from field: gazel.api.v1.ModuleStatistics statistics = 4;
   */
  statistics?: ModuleStatistics;
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphResponse.
 * Use `create(GetModuleGraphResponseSchema)` to create a new message.
 */
export declare const GetModuleGraphResponseSchema: GenMessage<GetModuleGraphResponse>;

/**
 * @generated from message gazel.api.v1.ModuleStatistics
 */
export declare type ModuleStatistics = Message<"gazel.api.v1.ModuleStatistics"> & {
  /**
   * @generated from field: int32 total_modules = 1;
   */
  totalModules: number;

  /**
   * @generated from field: int32 direct_dependencies = 2;
   */
  directDependencies: number;

  /**
   * @generated from field: int32 dev_dependencies = 3;
   */
  devDependencies: number;

  /**
   * @generated from field: int32 indirect_dependencies = 4;
   */
  indirectDependencies: number;
};

/**
 * Describes the message gazel.api.v1.ModuleStatistics.
 * Use `create(ModuleStatisticsSchema)` to create a new message.
 */
export declare const ModuleStatisticsSchema: GenMessage<ModuleStatistics>;

/**
 * @generated from message gazel.api.v1.GetModuleInfoRequest
 */
export declare type GetModuleInfoRequest = Message<"gazel.api.v1.GetModuleInfoRequest"> & {
  /**
   * @generated from field: string module_name = 1;
   */
  moduleName: string;
};

/**
 * Describes the message gazel.api.v1.GetModuleInfoRequest.
 * Use `create(GetModuleInfoRequestSchema)` to create a new message.
 */
export declare const GetModuleInfoRequestSchema: GenMessage<GetModuleInfoRequest>;

/**
 * @generated from message gazel.api.v1.GetModuleInfoResponse
 */
export declare type GetModuleInfoResponse = Message<"gazel.api.v1.GetModuleInfoResponse"> & {
  /**
   * @generated from field: gazel.api.v1.Module module = 1;
   */
  module?: Module;
};

/**
 * Describes the message gazel.api.v1.GetModuleInfoResponse.
 * Use `create(GetModuleInfoResponseSchema)` to create a new message.
 */
export declare const GetModuleInfoResponseSchema: GenMessage<GetModuleInfoResponse>;

/**
 * @generated from message gazel.api.v1.GetModuleGraphDotRequest
 */
export declare type GetModuleGraphDotRequest = Message<"gazel.api.v1.GetModuleGraphDotRequest"> & {
  /**
   * Additional options like --depth, --from, etc.
   *
   * @generated from field: repeated string options = 1;
   */
  options: string[];
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphDotRequest.
 * Use `create(GetModuleGraphDotRequestSchema)` to create a new message.
 */
export declare const GetModuleGraphDotRequestSchema: GenMessage<GetModuleGraphDotRequest>;

/**
 * @generated from message gazel.api.v1.GetModuleGraphDotResponse
 */
export declare type GetModuleGraphDotResponse = Message<"gazel.api.v1.GetModuleGraphDotResponse"> & {
  /**
   * DOT format graph
   *
   * @generated from field: string dot = 1;
   */
  dot: string;
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphDotResponse.
 * Use `create(GetModuleGraphDotResponseSchema)` to create a new message.
 */
export declare const GetModuleGraphDotResponseSchema: GenMessage<GetModuleGraphDotResponse>;

/**
 * @generated from message gazel.api.v1.GetQueryTemplatesRequest
 */
export declare type GetQueryTemplatesRequest = Message<"gazel.api.v1.GetQueryTemplatesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetQueryTemplatesRequest.
 * Use `create(GetQueryTemplatesRequestSchema)` to create a new message.
 */
export declare const GetQueryTemplatesRequestSchema: GenMessage<GetQueryTemplatesRequest>;

/**
 * @generated from message gazel.api.v1.GetQueryTemplatesResponse
 */
export declare type GetQueryTemplatesResponse = Message<"gazel.api.v1.GetQueryTemplatesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.QueryTemplate templates = 1;
   */
  templates: QueryTemplate[];
};

/**
 * Describes the message gazel.api.v1.GetQueryTemplatesResponse.
 * Use `create(GetQueryTemplatesResponseSchema)` to create a new message.
 */
export declare const GetQueryTemplatesResponseSchema: GenMessage<GetQueryTemplatesResponse>;

/**
 * @generated from message gazel.api.v1.GetSavedQueriesRequest
 */
export declare type GetSavedQueriesRequest = Message<"gazel.api.v1.GetSavedQueriesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetSavedQueriesRequest.
 * Use `create(GetSavedQueriesRequestSchema)` to create a new message.
 */
export declare const GetSavedQueriesRequestSchema: GenMessage<GetSavedQueriesRequest>;

/**
 * @generated from message gazel.api.v1.GetSavedQueriesResponse
 */
export declare type GetSavedQueriesResponse = Message<"gazel.api.v1.GetSavedQueriesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.SavedQuery queries = 1;
   */
  queries: SavedQuery[];
};

/**
 * Describes the message gazel.api.v1.GetSavedQueriesResponse.
 * Use `create(GetSavedQueriesResponseSchema)` to create a new message.
 */
export declare const GetSavedQueriesResponseSchema: GenMessage<GetSavedQueriesResponse>;

/**
 * @generated from message gazel.api.v1.SaveQueryRequest
 */
export declare type SaveQueryRequest = Message<"gazel.api.v1.SaveQueryRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string query = 2;
   */
  query: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message gazel.api.v1.SaveQueryRequest.
 * Use `create(SaveQueryRequestSchema)` to create a new message.
 */
export declare const SaveQueryRequestSchema: GenMessage<SaveQueryRequest>;

/**
 * @generated from message gazel.api.v1.SaveQueryResponse
 */
export declare type SaveQueryResponse = Message<"gazel.api.v1.SaveQueryResponse"> & {
  /**
   * @generated from field: gazel.api.v1.SavedQuery query = 1;
   */
  query?: SavedQuery;
};

/**
 * Describes the message gazel.api.v1.SaveQueryResponse.
 * Use `create(SaveQueryResponseSchema)` to create a new message.
 */
export declare const SaveQueryResponseSchema: GenMessage<SaveQueryResponse>;

/**
 * @generated from message gazel.api.v1.DeleteQueryRequest
 */
export declare type DeleteQueryRequest = Message<"gazel.api.v1.DeleteQueryRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message gazel.api.v1.DeleteQueryRequest.
 * Use `create(DeleteQueryRequestSchema)` to create a new message.
 */
export declare const DeleteQueryRequestSchema: GenMessage<DeleteQueryRequest>;

/**
 * @generated from message gazel.api.v1.DeleteQueryResponse
 */
export declare type DeleteQueryResponse = Message<"gazel.api.v1.DeleteQueryResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message gazel.api.v1.DeleteQueryResponse.
 * Use `create(DeleteQueryResponseSchema)` to create a new message.
 */
export declare const DeleteQueryResponseSchema: GenMessage<DeleteQueryResponse>;

/**
 * @generated from message gazel.api.v1.StreamRunRequest
 */
export declare type StreamRunRequest = Message<"gazel.api.v1.StreamRunRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[];
};

/**
 * Describes the message gazel.api.v1.StreamRunRequest.
 * Use `create(StreamRunRequestSchema)` to create a new message.
 */
export declare const StreamRunRequestSchema: GenMessage<StreamRunRequest>;

/**
 * @generated from message gazel.api.v1.StreamRunResponse
 */
export declare type StreamRunResponse = Message<"gazel.api.v1.StreamRunResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.StreamRunResponse.event
   */
  event: {
    /**
     * @generated from field: string output = 1;
     */
    value: string;
    case: "output";
  } | {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: gazel.api.v1.RunProgress progress = 3;
     */
    value: RunProgress;
    case: "progress";
  } | {
    /**
     * @generated from field: gazel.api.v1.RunComplete complete = 4;
     */
    value: RunComplete;
    case: "complete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.StreamRunResponse.
 * Use `create(StreamRunResponseSchema)` to create a new message.
 */
export declare const StreamRunResponseSchema: GenMessage<StreamRunResponse>;

/**
 * @generated from message gazel.api.v1.RunProgress
 */
export declare type RunProgress = Message<"gazel.api.v1.RunProgress"> & {
  /**
   * @generated from field: string current_action = 1;
   */
  currentAction: string;
};

/**
 * Describes the message gazel.api.v1.RunProgress.
 * Use `create(RunProgressSchema)` to create a new message.
 */
export declare const RunProgressSchema: GenMessage<RunProgress>;

/**
 * @generated from message gazel.api.v1.RunComplete
 */
export declare type RunComplete = Message<"gazel.api.v1.RunComplete"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: int32 exit_code = 2;
   */
  exitCode: number;

  /**
   * @generated from field: int64 duration_ms = 3;
   */
  durationMs: bigint;
};

/**
 * Describes the message gazel.api.v1.RunComplete.
 * Use `create(RunCompleteSchema)` to create a new message.
 */
export declare const RunCompleteSchema: GenMessage<RunComplete>;

/**
 * File Service Messages
 *
 * @generated from message gazel.api.v1.GetBuildFileRequest
 */
export declare type GetBuildFileRequest = Message<"gazel.api.v1.GetBuildFileRequest"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message gazel.api.v1.GetBuildFileRequest.
 * Use `create(GetBuildFileRequestSchema)` to create a new message.
 */
export declare const GetBuildFileRequestSchema: GenMessage<GetBuildFileRequest>;

/**
 * @generated from message gazel.api.v1.GetBuildFileResponse
 */
export declare type GetBuildFileResponse = Message<"gazel.api.v1.GetBuildFileResponse"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string content = 2;
   */
  content: string;

  /**
   * @generated from field: repeated gazel.api.v1.BuildFileTarget targets = 3;
   */
  targets: BuildFileTarget[];

  /**
   * @generated from field: int32 lines = 4;
   */
  lines: number;
};

/**
 * Describes the message gazel.api.v1.GetBuildFileResponse.
 * Use `create(GetBuildFileResponseSchema)` to create a new message.
 */
export declare const GetBuildFileResponseSchema: GenMessage<GetBuildFileResponse>;

/**
 * @generated from message gazel.api.v1.BuildFileTarget
 */
export declare type BuildFileTarget = Message<"gazel.api.v1.BuildFileTarget"> & {
  /**
   * @generated from field: string rule_type = 1;
   */
  ruleType: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: int32 line = 3;
   */
  line: number;
};

/**
 * Describes the message gazel.api.v1.BuildFileTarget.
 * Use `create(BuildFileTargetSchema)` to create a new message.
 */
export declare const BuildFileTargetSchema: GenMessage<BuildFileTarget>;

/**
 * @generated from message gazel.api.v1.GetRulesByFileRequest
 */
export declare type GetRulesByFileRequest = Message<"gazel.api.v1.GetRulesByFileRequest"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;
};

/**
 * Describes the message gazel.api.v1.GetRulesByFileRequest.
 * Use `create(GetRulesByFileRequestSchema)` to create a new message.
 */
export declare const GetRulesByFileRequestSchema: GenMessage<GetRulesByFileRequest>;

/**
 * @generated from message gazel.api.v1.GetRulesByFileResponse
 */
export declare type GetRulesByFileResponse = Message<"gazel.api.v1.GetRulesByFileResponse"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: repeated blaze_query.Rule rules = 2;
   */
  rules: Rule[];
};

/**
 * Describes the message gazel.api.v1.GetRulesByFileResponse.
 * Use `create(GetRulesByFileResponseSchema)` to create a new message.
 */
export declare const GetRulesByFileResponseSchema: GenMessage<GetRulesByFileResponse>;

/**
 * @generated from message gazel.api.v1.SearchInFilesRequest
 */
export declare type SearchInFilesRequest = Message<"gazel.api.v1.SearchInFilesRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: bool case_sensitive = 2;
   */
  caseSensitive: boolean;
};

/**
 * Describes the message gazel.api.v1.SearchInFilesRequest.
 * Use `create(SearchInFilesRequestSchema)` to create a new message.
 */
export declare const SearchInFilesRequestSchema: GenMessage<SearchInFilesRequest>;

/**
 * @generated from message gazel.api.v1.SearchInFilesResponse
 */
export declare type SearchInFilesResponse = Message<"gazel.api.v1.SearchInFilesResponse"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: bool case_sensitive = 2;
   */
  caseSensitive: boolean;

  /**
   * @generated from field: int32 total = 3;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.SearchResult results = 4;
   */
  results: SearchResult[];
};

/**
 * Describes the message gazel.api.v1.SearchInFilesResponse.
 * Use `create(SearchInFilesResponseSchema)` to create a new message.
 */
export declare const SearchInFilesResponseSchema: GenMessage<SearchInFilesResponse>;

/**
 * @generated from message gazel.api.v1.SearchResult
 */
export declare type SearchResult = Message<"gazel.api.v1.SearchResult"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: int32 line = 2;
   */
  line: number;

  /**
   * @generated from field: string content = 3;
   */
  content: string;
};

/**
 * Describes the message gazel.api.v1.SearchResult.
 * Use `create(SearchResultSchema)` to create a new message.
 */
export declare const SearchResultSchema: GenMessage<SearchResult>;

/**
 * Command History Messages
 *
 * @generated from message gazel.api.v1.GetCommandHistoryRequest
 */
export declare type GetCommandHistoryRequest = Message<"gazel.api.v1.GetCommandHistoryRequest"> & {
  /**
   * Maximum number of history items to return (default: 50)
   *
   * @generated from field: int32 limit = 1;
   */
  limit: number;
};

/**
 * Describes the message gazel.api.v1.GetCommandHistoryRequest.
 * Use `create(GetCommandHistoryRequestSchema)` to create a new message.
 */
export declare const GetCommandHistoryRequestSchema: GenMessage<GetCommandHistoryRequest>;

/**
 * @generated from message gazel.api.v1.GetCommandHistoryResponse
 */
export declare type GetCommandHistoryResponse = Message<"gazel.api.v1.GetCommandHistoryResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.CommandHistoryItem history = 1;
   */
  history: CommandHistoryItem[];
};

/**
 * Describes the message gazel.api.v1.GetCommandHistoryResponse.
 * Use `create(GetCommandHistoryResponseSchema)` to create a new message.
 */
export declare const GetCommandHistoryResponseSchema: GenMessage<GetCommandHistoryResponse>;

/**
 * @generated from message gazel.api.v1.CommandHistoryItem
 */
export declare type CommandHistoryItem = Message<"gazel.api.v1.CommandHistoryItem"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * "build", "test", "run"
   *
   * @generated from field: string command = 2;
   */
  command: string;

  /**
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 4;
   */
  options: string[];

  /**
   * @generated from field: int64 timestamp = 5;
   */
  timestamp: bigint;

  /**
   * @generated from field: bool success = 6;
   */
  success: boolean;

  /**
   * @generated from field: string output = 7;
   */
  output: string;

  /**
   * @generated from field: string error = 8;
   */
  error: string;

  /**
   * @generated from field: int32 duration_ms = 9;
   */
  durationMs: number;
};

/**
 * Describes the message gazel.api.v1.CommandHistoryItem.
 * Use `create(CommandHistoryItemSchema)` to create a new message.
 */
export declare const CommandHistoryItemSchema: GenMessage<CommandHistoryItem>;

/**
 * Configuration messages
 *
 * @generated from message gazel.api.v1.UpdateBazelExecutableRequest
 */
export declare type UpdateBazelExecutableRequest = Message<"gazel.api.v1.UpdateBazelExecutableRequest"> & {
  /**
   * Path to bazel/bazelisk executable (empty for auto-detect)
   *
   * @generated from field: string executable = 1;
   */
  executable: string;
};

/**
 * Describes the message gazel.api.v1.UpdateBazelExecutableRequest.
 * Use `create(UpdateBazelExecutableRequestSchema)` to create a new message.
 */
export declare const UpdateBazelExecutableRequestSchema: GenMessage<UpdateBazelExecutableRequest>;

/**
 * @generated from message gazel.api.v1.UpdateBazelExecutableResponse
 */
export declare type UpdateBazelExecutableResponse = Message<"gazel.api.v1.UpdateBazelExecutableResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * The actual path being used after resolution
   *
   * @generated from field: string detected_path = 3;
   */
  detectedPath: string;
};

/**
 * Describes the message gazel.api.v1.UpdateBazelExecutableResponse.
 * Use `create(UpdateBazelExecutableResponseSchema)` to create a new message.
 */
export declare const UpdateBazelExecutableResponseSchema: GenMessage<UpdateBazelExecutableResponse>;

/**
 * @generated from service gazel.api.v1.GazelService
 */
export declare const GazelService: GenService<{
  /**
   * Workspace operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetWorkspaceInfo
   */
  getWorkspaceInfo: {
    methodKind: "unary";
    input: typeof GetWorkspaceInfoRequestSchema;
    output: typeof GetWorkspaceInfoResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetCurrentWorkspace
   */
  getCurrentWorkspace: {
    methodKind: "unary";
    input: typeof GetCurrentWorkspaceRequestSchema;
    output: typeof GetCurrentWorkspaceResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.ScanWorkspaces
   */
  scanWorkspaces: {
    methodKind: "unary";
    input: typeof ScanWorkspacesRequestSchema;
    output: typeof ScanWorkspacesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SwitchWorkspace
   */
  switchWorkspace: {
    methodKind: "unary";
    input: typeof SwitchWorkspaceRequestSchema;
    output: typeof SwitchWorkspaceResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetWorkspaceFiles
   */
  getWorkspaceFiles: {
    methodKind: "unary";
    input: typeof GetWorkspaceFilesRequestSchema;
    output: typeof GetWorkspaceFilesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetBazelInfo
   */
  getBazelInfo: {
    methodKind: "unary";
    input: typeof GetBazelInfoRequestSchema;
    output: typeof GetBazelInfoResponseSchema;
  },
  /**
   * Target operations
   *
   * @generated from rpc gazel.api.v1.GazelService.ListTargets
   */
  listTargets: {
    methodKind: "server_streaming";
    input: typeof ListTargetsRequestSchema;
    output: typeof ListTargetsResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTarget
   */
  getTarget: {
    methodKind: "unary";
    input: typeof GetTargetRequestSchema;
    output: typeof GetTargetResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTargetDependencies
   */
  getTargetDependencies: {
    methodKind: "unary";
    input: typeof GetTargetDependenciesRequestSchema;
    output: typeof GetTargetDependenciesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTargetOutputs
   */
  getTargetOutputs: {
    methodKind: "unary";
    input: typeof GetTargetOutputsRequestSchema;
    output: typeof GetTargetOutputsResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetReverseDependencies
   */
  getReverseDependencies: {
    methodKind: "unary";
    input: typeof GetReverseDependenciesRequestSchema;
    output: typeof GetReverseDependenciesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetOutputConsumers
   */
  getOutputConsumers: {
    methodKind: "unary";
    input: typeof GetOutputConsumersRequestSchema;
    output: typeof GetOutputConsumersResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SearchTargets
   */
  searchTargets: {
    methodKind: "server_streaming";
    input: typeof SearchTargetsRequestSchema;
    output: typeof SearchTargetsResponseSchema;
  },
  /**
   * Query operations
   *
   * @generated from rpc gazel.api.v1.GazelService.ExecuteQuery
   */
  executeQuery: {
    methodKind: "unary";
    input: typeof ExecuteQueryRequestSchema;
    output: typeof ExecuteQueryResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.StreamQuery
   */
  streamQuery: {
    methodKind: "server_streaming";
    input: typeof StreamQueryRequestSchema;
    output: typeof StreamQueryResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetQueryTemplates
   */
  getQueryTemplates: {
    methodKind: "unary";
    input: typeof GetQueryTemplatesRequestSchema;
    output: typeof GetQueryTemplatesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetSavedQueries
   */
  getSavedQueries: {
    methodKind: "unary";
    input: typeof GetSavedQueriesRequestSchema;
    output: typeof GetSavedQueriesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SaveQuery
   */
  saveQuery: {
    methodKind: "unary";
    input: typeof SaveQueryRequestSchema;
    output: typeof SaveQueryResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.DeleteQuery
   */
  deleteQuery: {
    methodKind: "unary";
    input: typeof DeleteQueryRequestSchema;
    output: typeof DeleteQueryResponseSchema;
  },
  /**
   * Build operations
   *
   * @generated from rpc gazel.api.v1.GazelService.BuildTarget
   */
  buildTarget: {
    methodKind: "unary";
    input: typeof BuildTargetRequestSchema;
    output: typeof BuildTargetResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.StreamBuild
   */
  streamBuild: {
    methodKind: "server_streaming";
    input: typeof StreamBuildRequestSchema;
    output: typeof StreamBuildResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.StreamRun
   */
  streamRun: {
    methodKind: "server_streaming";
    input: typeof StreamRunRequestSchema;
    output: typeof StreamRunResponseSchema;
  },
  /**
   * Module operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetModuleGraph
   */
  getModuleGraph: {
    methodKind: "unary";
    input: typeof GetModuleGraphRequestSchema;
    output: typeof GetModuleGraphResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetModuleInfo
   */
  getModuleInfo: {
    methodKind: "unary";
    input: typeof GetModuleInfoRequestSchema;
    output: typeof GetModuleInfoResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetModuleGraphDot
   */
  getModuleGraphDot: {
    methodKind: "unary";
    input: typeof GetModuleGraphDotRequestSchema;
    output: typeof GetModuleGraphDotResponseSchema;
  },
  /**
   * File operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetBuildFile
   */
  getBuildFile: {
    methodKind: "unary";
    input: typeof GetBuildFileRequestSchema;
    output: typeof GetBuildFileResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetRulesByFile
   */
  getRulesByFile: {
    methodKind: "unary";
    input: typeof GetRulesByFileRequestSchema;
    output: typeof GetRulesByFileResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SearchInFiles
   */
  searchInFiles: {
    methodKind: "unary";
    input: typeof SearchInFilesRequestSchema;
    output: typeof SearchInFilesResponseSchema;
  },
  /**
   * Command history operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetCommandHistory
   */
  getCommandHistory: {
    methodKind: "unary";
    input: typeof GetCommandHistoryRequestSchema;
    output: typeof GetCommandHistoryResponseSchema;
  },
  /**
   * Configuration operations
   *
   * @generated from rpc gazel.api.v1.GazelService.UpdateBazelExecutable
   */
  updateBazelExecutable: {
    methodKind: "unary";
    input: typeof UpdateBazelExecutableRequestSchema;
    output: typeof UpdateBazelExecutableResponseSchema;
  },
}>;

