"""Application targets for running Gazel"""

load("@aspect_rules_js//js:defs.bzl", "js_binary")

package(default_visibility = ["//visibility:public"])

# Development mode - runs server only
js_binary(
    name = "server_dev",
    data = [
        "//server:server_ts",
        "//:node_modules",
        "//client:dev",
    ],
    
    entry_point = "//server:server_ts",
)

# Create a Node.js script for running both dev servers
genrule(
    name = "dev_script_gen",
    outs = ["dev.cjs"],
    cmd = """
cat > $@ << 'EOF'
const { spawn } = require('child_process');
const path = require('path');

console.log('🚀 Starting Gazel in development mode...');
console.log('');
console.log('📡 Server: http://localhost:3002');
console.log('🌐 Client: http://localhost:5173');
console.log('');

// Determine the workspace root - use BUILD_WORKSPACE_DIRECTORY if available
// This is set by bazel run and points to the actual workspace
const workspaceRoot = process.env.BUILD_WORKSPACE_DIRECTORY;

if (!workspaceRoot) {
    console.error('❌ Error: BUILD_WORKSPACE_DIRECTORY not set');
    console.error('   This script must be run with: bazel run //app:dev');
    process.exit(1);
}

console.log('📂 Workspace:', workspaceRoot);
console.log('');

// Determine which bazel command to use (bazelisk or bazel)
const bazelCmd = process.env.BAZEL_REAL || 'bazelisk';

// Start the server using bazel run
console.log('🔧 [server] Starting backend server...');
const server = spawn(bazelCmd, ['run', '//server:run'], {
    stdio: 'inherit',
    cwd: workspaceRoot,
    env: { ...process.env, PORT: '3002' }
});

// Give the server a moment to start
setTimeout(() => {
    // Start the client dev server (Vite) using bazel run
    console.log('🔧 [client] Starting Vite dev server...');

    const client = spawn(bazelCmd, ['run', '//client:dev'], {
        stdio: 'inherit',
        cwd: workspaceRoot,
        env: { ...process.env }
    });

    // Handle process termination
    const cleanup = () => {
        console.log('\\n🛑 Shutting down...');
        server.kill('SIGTERM');
        client.kill('SIGTERM');
        setTimeout(() => {
            server.kill('SIGKILL');
            client.kill('SIGKILL');
            process.exit(0);
        }, 2000);
    };

    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);

    server.on('exit', (code) => {
        console.log(`Server exited with code $${code}`);
        client.kill('SIGTERM');
        setTimeout(() => process.exit(code || 0), 1000);
    });

    client.on('exit', (code) => {
        console.log(`Client exited with code $${code}`);
        server.kill('SIGTERM');
        setTimeout(() => process.exit(code || 0), 1000);
    });
}, 1000);

EOF
""",
)

# Combined development mode - runs both server and client
# This target spawns bazel run commands for both server and client
# Note: Bazel automatically handles npm dependencies through the yarn.lock file.
# The //:node_modules target ensures all dependencies are installed and available.
# No need to run 'yarn install' manually - Bazel manages this automatically.
js_binary(
    name = "dev",
    data = [
        "//:node_modules",  # This ensures all npm dependencies are available
    ],
    entry_point = ":dev_script_gen",
)

# Development mode without opening browser (for Electron)
js_binary(
    name = "dev_no_browser",
    data = [
        "//:node_modules",
    ],
    entry_point = ":dev_script_gen",
    env = {
        "OPEN_BROWSER": "false",
    },
)

# Production build target
filegroup(
    name = "prod_build",
    srcs = [
        "//server:server_ts",
        "//client:build",
        "//proto:index",
    ],
)

# Production server only
js_binary(
    name = "prod_server",
    data = [
        ":prod_build",
        "//:node_modules",
    ],
    entry_point = "//server:server_ts",
    env = {
        "NODE_ENV": "production",
        "PORT": "3002",
    },
)

# Create a Node.js script for running production mode
genrule(
    name = "prod_script_gen",
    outs = ["prod.cjs"],
    cmd = """
cat > $@ << 'EOF'
const { spawn } = require('child_process');
const path = require('path');

console.log('Starting Gazel in production mode...');
console.log('Server: http://localhost:3002');
console.log('');

const runfilesDir = process.env.RUNFILES_DIR || path.join(__dirname, '..', '..');

// Function to open browser
function openBrowser(url) {
    const platform = process.platform;
    let cmd;

    if (platform === 'darwin') {
        cmd = 'open';
    } else if (platform === 'win32') {
        cmd = 'start';
    } else {
        cmd = 'xdg-open';
    }

    spawn(cmd, [url], { detached: true, stdio: 'ignore' }).unref();
}

// Start the production server with the built client files
console.log('[server] Starting production server with built client...');
const server = spawn('node', [path.join(runfilesDir, '_main/server/index.js')], {
    stdio: 'inherit',
    env: {
        ...process.env,
        NODE_ENV: 'production',
        PORT: '3002',
        RUNFILES_DIR: runfilesDir
    }
});

// Open browser after a short delay to ensure server is ready
setTimeout(() => {
    console.log('Opening browser at http://localhost:3002...');
    openBrowser('http://localhost:3002');
}, 2000);

// Handle process termination
const cleanup = () => {
    console.log('\\nShutting down...');
    server.kill();
    process.exit(0);
};

process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);

server.on('exit', (code) => {
    console.log(`Server exited with code $${code}`);
    process.exit(code || 0);
});
EOF
""",
)

# Combined production mode - server serves the built client files
# The server will serve the static client build from the runfiles directory
# All npm dependencies are automatically managed by Bazel through //:node_modules
# Usage: bazel run //app:run
js_binary(
    name = "main",
    data = [
        "//server:server_ts",
        "//client:build",  # Include the built client files
        "//:node_modules",  # This ensures all npm dependencies are available
        "//:package_json",  # Include package.json for reference
    ],
    entry_point = ":prod_script_gen",
    env = {
        "NODE_ENV": "production",
    },
)