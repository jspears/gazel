load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_library")
load("@aspect_rules_swc//swc:defs.bzl", "swc")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config")

package(default_visibility = ["//visibility:public"])

npm_link_all_packages(name = "node_modules")

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//visibility:public"],
    deps = [
        "//:tsconfig"
    ],
)
# TypeScript compilation for server
ts_project(
    name = "server_ts",
    tsconfig = ":tsconfig",
    data = ["package.json"],
    deps = [
        "//proto:index",
        "//:node_modules",
        ":node_modules",
        ":node_modules/@bufbuild/protobuf",
        ":node_modules/@connectrpc/connect",
        ":node_modules/@connectrpc/connect-node",
        ":node_modules/@types/node",
        ":node_modules/dotenv",
    ],
)

# Server library for use by Electron
js_library(
    name = "server_lib",
    srcs = [":server_ts"],
    deps = [
        "//proto:index",
        "//:node_modules/@bufbuild/protobuf",
        "//:node_modules/@connectrpc/connect",
        ":node_modules",
    ],
)

# Server binary
js_binary(
    name = "run",
    data = [
        ":server_lib",
        "//proto:index",
        "//:node_modules",
        ":node_modules",
    ],
    entry_point = "main.js",
    chdir = package_name(),
)
