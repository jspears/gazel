// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file gazel.proto (package gazel.api.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file gazel.proto.
 */
export const file_gazel: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_empty, file_google_protobuf_timestamp]);

/**
 * @generated from message gazel.api.v1.WorkspaceInfo
 */
export type WorkspaceInfo = Message<"gazel.api.v1.WorkspaceInfo"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: bool valid = 3;
   */
  valid: boolean;

  /**
   * @generated from field: string error = 4;
   */
  error: string;

  /**
   * @generated from field: repeated string packages = 5;
   */
  packages: string[];

  /**
   * @generated from field: int32 target_count = 6;
   */
  targetCount: number;

  /**
   * @generated from field: int32 file_count = 7;
   */
  fileCount: number;
};

/**
 * Describes the message gazel.api.v1.WorkspaceInfo.
 * Use `create(WorkspaceInfoSchema)` to create a new message.
 */
export const WorkspaceInfoSchema: GenMessage<WorkspaceInfo> = /*@__PURE__*/
  messageDesc(file_gazel, 0);

/**
 * @generated from message gazel.api.v1.BazelTarget
 */
export type BazelTarget = Message<"gazel.api.v1.BazelTarget"> & {
  /**
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * @generated from field: string package = 3;
   */
  package: string;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];

  /**
   * @generated from field: repeated string deps = 6;
   */
  deps: string[];

  /**
   * @generated from field: repeated string srcs = 7;
   */
  srcs: string[];

  /**
   * @generated from field: map<string, string> attributes = 8;
   */
  attributes: { [key: string]: string };

  /**
   * @generated from field: string visibility = 9;
   */
  visibility: string;

  /**
   * @generated from field: bool testonly = 10;
   */
  testonly: boolean;
};

/**
 * Describes the message gazel.api.v1.BazelTarget.
 * Use `create(BazelTargetSchema)` to create a new message.
 */
export const BazelTargetSchema: GenMessage<BazelTarget> = /*@__PURE__*/
  messageDesc(file_gazel, 1);

/**
 * @generated from message gazel.api.v1.BuildFile
 */
export type BuildFile = Message<"gazel.api.v1.BuildFile"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string package = 2;
   */
  package: string;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 3;
   */
  targets: BazelTarget[];

  /**
   * @generated from field: int32 line_count = 4;
   */
  lineCount: number;

  /**
   * @generated from field: int64 size_bytes = 5;
   */
  sizeBytes: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp modified_time = 6;
   */
  modifiedTime?: Timestamp;
};

/**
 * Describes the message gazel.api.v1.BuildFile.
 * Use `create(BuildFileSchema)` to create a new message.
 */
export const BuildFileSchema: GenMessage<BuildFile> = /*@__PURE__*/
  messageDesc(file_gazel, 2);

/**
 * @generated from message gazel.api.v1.QueryTemplate
 */
export type QueryTemplate = Message<"gazel.api.v1.QueryTemplate"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string template = 4;
   */
  template: string;

  /**
   * @generated from field: repeated string parameters = 5;
   */
  parameters: string[];

  /**
   * @generated from field: string category = 6;
   */
  category: string;
};

/**
 * Describes the message gazel.api.v1.QueryTemplate.
 * Use `create(QueryTemplateSchema)` to create a new message.
 */
export const QueryTemplateSchema: GenMessage<QueryTemplate> = /*@__PURE__*/
  messageDesc(file_gazel, 3);

/**
 * @generated from message gazel.api.v1.SavedQuery
 */
export type SavedQuery = Message<"gazel.api.v1.SavedQuery"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string query = 3;
   */
  query: string;

  /**
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 6;
   */
  updatedAt?: Timestamp;
};

/**
 * Describes the message gazel.api.v1.SavedQuery.
 * Use `create(SavedQuerySchema)` to create a new message.
 */
export const SavedQuerySchema: GenMessage<SavedQuery> = /*@__PURE__*/
  messageDesc(file_gazel, 4);

/**
 * @generated from message gazel.api.v1.CommandHistory
 */
export type CommandHistory = Message<"gazel.api.v1.CommandHistory"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string command = 2;
   */
  command: string;

  /**
   * @generated from field: repeated string args = 3;
   */
  args: string[];

  /**
   * @generated from field: bool success = 4;
   */
  success: boolean;

  /**
   * @generated from field: string output = 5;
   */
  output: string;

  /**
   * @generated from field: string error = 6;
   */
  error: string;

  /**
   * @generated from field: google.protobuf.Timestamp executed_at = 7;
   */
  executedAt?: Timestamp;

  /**
   * @generated from field: int64 duration_ms = 8;
   */
  durationMs: bigint;
};

/**
 * Describes the message gazel.api.v1.CommandHistory.
 * Use `create(CommandHistorySchema)` to create a new message.
 */
export const CommandHistorySchema: GenMessage<CommandHistory> = /*@__PURE__*/
  messageDesc(file_gazel, 5);

/**
 * @generated from message gazel.api.v1.Module
 */
export type Module = Message<"gazel.api.v1.Module"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * @generated from field: gazel.api.v1.Location location = 4;
   */
  location?: Location;

  /**
   * @generated from field: int32 compatibility_level = 5;
   */
  compatibilityLevel: number;

  /**
   * @generated from field: string repo_name = 6;
   */
  repoName: string;

  /**
   * @generated from field: repeated string bazel_compatibility = 7;
   */
  bazelCompatibility: string[];

  /**
   * @generated from field: bool module_rule_exports_all_rules = 8;
   */
  moduleRuleExportsAllRules: boolean;

  /**
   * @generated from field: repeated string tags = 9;
   */
  tags: string[];

  /**
   * @generated from field: repeated gazel.api.v1.Dependency dependencies = 10;
   */
  dependencies: Dependency[];

  /**
   * @generated from field: repeated gazel.api.v1.Dependency resolved_dependencies = 11;
   */
  resolvedDependencies: Dependency[];

  /**
   * @generated from field: repeated gazel.api.v1.ExtensionUsage extension_usages = 12;
   */
  extensionUsages: ExtensionUsage[];

  /**
   * @generated from field: int32 dependency_count = 13;
   */
  dependencyCount: number;

  /**
   * @generated from field: int32 extension_count = 14;
   */
  extensionCount: number;
};

/**
 * Describes the message gazel.api.v1.Module.
 * Use `create(ModuleSchema)` to create a new message.
 */
export const ModuleSchema: GenMessage<Module> = /*@__PURE__*/
  messageDesc(file_gazel, 6);

/**
 * @generated from message gazel.api.v1.Location
 */
export type Location = Message<"gazel.api.v1.Location"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: int32 line = 2;
   */
  line: number;

  /**
   * @generated from field: int32 column = 3;
   */
  column: number;
};

/**
 * Describes the message gazel.api.v1.Location.
 * Use `create(LocationSchema)` to create a new message.
 */
export const LocationSchema: GenMessage<Location> = /*@__PURE__*/
  messageDesc(file_gazel, 7);

/**
 * @generated from message gazel.api.v1.Dependency
 */
export type Dependency = Message<"gazel.api.v1.Dependency"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * @generated from field: bool dev_dependency = 4;
   */
  devDependency: boolean;

  /**
   * @generated from field: string registry = 5;
   */
  registry: string;
};

/**
 * Describes the message gazel.api.v1.Dependency.
 * Use `create(DependencySchema)` to create a new message.
 */
export const DependencySchema: GenMessage<Dependency> = /*@__PURE__*/
  messageDesc(file_gazel, 8);

/**
 * @generated from message gazel.api.v1.ExtensionUsage
 */
export type ExtensionUsage = Message<"gazel.api.v1.ExtensionUsage"> & {
  /**
   * @generated from field: string extension_bzl_file = 1;
   */
  extensionBzlFile: string;

  /**
   * @generated from field: string extension_name = 2;
   */
  extensionName: string;

  /**
   * @generated from field: gazel.api.v1.Location location = 3;
   */
  location?: Location;

  /**
   * @generated from field: map<string, string> imports = 4;
   */
  imports: { [key: string]: string };

  /**
   * @generated from field: bool dev_dependency = 5;
   */
  devDependency: boolean;

  /**
   * @generated from field: bool isolate = 6;
   */
  isolate: boolean;
};

/**
 * Describes the message gazel.api.v1.ExtensionUsage.
 * Use `create(ExtensionUsageSchema)` to create a new message.
 */
export const ExtensionUsageSchema: GenMessage<ExtensionUsage> = /*@__PURE__*/
  messageDesc(file_gazel, 9);

/**
 * @generated from message gazel.api.v1.ModuleDependency
 */
export type ModuleDependency = Message<"gazel.api.v1.ModuleDependency"> & {
  /**
   * @generated from field: string from = 1;
   */
  from: string;

  /**
   * @generated from field: string to = 2;
   */
  to: string;

  /**
   * "direct", "dev", "indirect"
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: string version = 4;
   */
  version: string;
};

/**
 * Describes the message gazel.api.v1.ModuleDependency.
 * Use `create(ModuleDependencySchema)` to create a new message.
 */
export const ModuleDependencySchema: GenMessage<ModuleDependency> = /*@__PURE__*/
  messageDesc(file_gazel, 10);

/**
 * Workspace Service Messages
 *
 * @generated from message gazel.api.v1.GetWorkspaceInfoRequest
 */
export type GetWorkspaceInfoRequest = Message<"gazel.api.v1.GetWorkspaceInfoRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceInfoRequest.
 * Use `create(GetWorkspaceInfoRequestSchema)` to create a new message.
 */
export const GetWorkspaceInfoRequestSchema: GenMessage<GetWorkspaceInfoRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 11);

/**
 * @generated from message gazel.api.v1.GetWorkspaceInfoResponse
 */
export type GetWorkspaceInfoResponse = Message<"gazel.api.v1.GetWorkspaceInfoResponse"> & {
  /**
   * @generated from field: gazel.api.v1.WorkspaceInfo info = 1;
   */
  info?: WorkspaceInfo;
};

/**
 * Describes the message gazel.api.v1.GetWorkspaceInfoResponse.
 * Use `create(GetWorkspaceInfoResponseSchema)` to create a new message.
 */
export const GetWorkspaceInfoResponseSchema: GenMessage<GetWorkspaceInfoResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 12);

/**
 * @generated from message gazel.api.v1.GetCurrentWorkspaceRequest
 */
export type GetCurrentWorkspaceRequest = Message<"gazel.api.v1.GetCurrentWorkspaceRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetCurrentWorkspaceRequest.
 * Use `create(GetCurrentWorkspaceRequestSchema)` to create a new message.
 */
export const GetCurrentWorkspaceRequestSchema: GenMessage<GetCurrentWorkspaceRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 13);

/**
 * @generated from message gazel.api.v1.GetCurrentWorkspaceResponse
 */
export type GetCurrentWorkspaceResponse = Message<"gazel.api.v1.GetCurrentWorkspaceResponse"> & {
  /**
   * @generated from field: bool configured = 1;
   */
  configured: boolean;

  /**
   * @generated from field: string workspace = 2;
   */
  workspace: string;

  /**
   * @generated from field: bool valid = 3;
   */
  valid: boolean;

  /**
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message gazel.api.v1.GetCurrentWorkspaceResponse.
 * Use `create(GetCurrentWorkspaceResponseSchema)` to create a new message.
 */
export const GetCurrentWorkspaceResponseSchema: GenMessage<GetCurrentWorkspaceResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 14);

/**
 * @generated from message gazel.api.v1.ScanWorkspacesRequest
 */
export type ScanWorkspacesRequest = Message<"gazel.api.v1.ScanWorkspacesRequest"> & {
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesRequest.
 * Use `create(ScanWorkspacesRequestSchema)` to create a new message.
 */
export const ScanWorkspacesRequestSchema: GenMessage<ScanWorkspacesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 15);

/**
 * @generated from message gazel.api.v1.ScanWorkspacesResponse
 */
export type ScanWorkspacesResponse = Message<"gazel.api.v1.ScanWorkspacesResponse"> & {
  /**
   * @generated from field: repeated gazel.api.v1.ScanWorkspacesResponse.Workspace workspaces = 1;
   */
  workspaces: ScanWorkspacesResponse_Workspace[];
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesResponse.
 * Use `create(ScanWorkspacesResponseSchema)` to create a new message.
 */
export const ScanWorkspacesResponseSchema: GenMessage<ScanWorkspacesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 16);

/**
 * @generated from message gazel.api.v1.ScanWorkspacesResponse.Workspace
 */
export type ScanWorkspacesResponse_Workspace = Message<"gazel.api.v1.ScanWorkspacesResponse.Workspace"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * "current", "parent", "home", "discovered"
   *
   * @generated from field: string type = 3;
   */
  type: string;
};

/**
 * Describes the message gazel.api.v1.ScanWorkspacesResponse.Workspace.
 * Use `create(ScanWorkspacesResponse_WorkspaceSchema)` to create a new message.
 */
export const ScanWorkspacesResponse_WorkspaceSchema: GenMessage<ScanWorkspacesResponse_Workspace> = /*@__PURE__*/
  messageDesc(file_gazel, 16, 0);

/**
 * @generated from message gazel.api.v1.SwitchWorkspaceRequest
 */
export type SwitchWorkspaceRequest = Message<"gazel.api.v1.SwitchWorkspaceRequest"> & {
  /**
   * @generated from field: string workspace = 1;
   */
  workspace: string;
};

/**
 * Describes the message gazel.api.v1.SwitchWorkspaceRequest.
 * Use `create(SwitchWorkspaceRequestSchema)` to create a new message.
 */
export const SwitchWorkspaceRequestSchema: GenMessage<SwitchWorkspaceRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 17);

/**
 * @generated from message gazel.api.v1.SwitchWorkspaceResponse
 */
export type SwitchWorkspaceResponse = Message<"gazel.api.v1.SwitchWorkspaceResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string workspace = 2;
   */
  workspace: string;

  /**
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message gazel.api.v1.SwitchWorkspaceResponse.
 * Use `create(SwitchWorkspaceResponseSchema)` to create a new message.
 */
export const SwitchWorkspaceResponseSchema: GenMessage<SwitchWorkspaceResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 18);

/**
 * Target Service Messages
 *
 * @generated from message gazel.api.v1.ListTargetsRequest
 */
export type ListTargetsRequest = Message<"gazel.api.v1.ListTargetsRequest"> & {
  /**
   * @generated from field: string pattern = 1;
   */
  pattern: string;

  /**
   * @generated from field: string format = 2;
   */
  format: string;
};

/**
 * Describes the message gazel.api.v1.ListTargetsRequest.
 * Use `create(ListTargetsRequestSchema)` to create a new message.
 */
export const ListTargetsRequestSchema: GenMessage<ListTargetsRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 19);

/**
 * @generated from message gazel.api.v1.ListTargetsResponse
 */
export type ListTargetsResponse = Message<"gazel.api.v1.ListTargetsResponse"> & {
  /**
   * @generated from field: int32 total = 1;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 2;
   */
  targets: BazelTarget[];

  /**
   * @generated from field: map<string, gazel.api.v1.TargetList> by_package = 3;
   */
  byPackage: { [key: string]: TargetList };
};

/**
 * Describes the message gazel.api.v1.ListTargetsResponse.
 * Use `create(ListTargetsResponseSchema)` to create a new message.
 */
export const ListTargetsResponseSchema: GenMessage<ListTargetsResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 20);

/**
 * @generated from message gazel.api.v1.TargetList
 */
export type TargetList = Message<"gazel.api.v1.TargetList"> & {
  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 1;
   */
  targets: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.TargetList.
 * Use `create(TargetListSchema)` to create a new message.
 */
export const TargetListSchema: GenMessage<TargetList> = /*@__PURE__*/
  messageDesc(file_gazel, 21);

/**
 * @generated from message gazel.api.v1.GetTargetRequest
 */
export type GetTargetRequest = Message<"gazel.api.v1.GetTargetRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetTargetRequest.
 * Use `create(GetTargetRequestSchema)` to create a new message.
 */
export const GetTargetRequestSchema: GenMessage<GetTargetRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 22);

/**
 * @generated from message gazel.api.v1.GetTargetResponse
 */
export type GetTargetResponse = Message<"gazel.api.v1.GetTargetResponse"> & {
  /**
   * @generated from field: gazel.api.v1.BazelTarget target = 1;
   */
  target?: BazelTarget;
};

/**
 * Describes the message gazel.api.v1.GetTargetResponse.
 * Use `create(GetTargetResponseSchema)` to create a new message.
 */
export const GetTargetResponseSchema: GenMessage<GetTargetResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 23);

/**
 * @generated from message gazel.api.v1.GetTargetDependenciesRequest
 */
export type GetTargetDependenciesRequest = Message<"gazel.api.v1.GetTargetDependenciesRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 depth = 2;
   */
  depth: number;
};

/**
 * Describes the message gazel.api.v1.GetTargetDependenciesRequest.
 * Use `create(GetTargetDependenciesRequestSchema)` to create a new message.
 */
export const GetTargetDependenciesRequestSchema: GenMessage<GetTargetDependenciesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 24);

/**
 * @generated from message gazel.api.v1.GetTargetDependenciesResponse
 */
export type GetTargetDependenciesResponse = Message<"gazel.api.v1.GetTargetDependenciesResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 depth = 2;
   */
  depth: number;

  /**
   * @generated from field: int32 total = 3;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget dependencies = 4;
   */
  dependencies: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.GetTargetDependenciesResponse.
 * Use `create(GetTargetDependenciesResponseSchema)` to create a new message.
 */
export const GetTargetDependenciesResponseSchema: GenMessage<GetTargetDependenciesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 25);

/**
 * @generated from message gazel.api.v1.GetTargetOutputsRequest
 */
export type GetTargetOutputsRequest = Message<"gazel.api.v1.GetTargetOutputsRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetTargetOutputsRequest.
 * Use `create(GetTargetOutputsRequestSchema)` to create a new message.
 */
export const GetTargetOutputsRequestSchema: GenMessage<GetTargetOutputsRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 26);

/**
 * @generated from message gazel.api.v1.GetTargetOutputsResponse
 */
export type GetTargetOutputsResponse = Message<"gazel.api.v1.GetTargetOutputsResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string outputs = 2;
   */
  outputs: string[];

  /**
   * @generated from field: int32 count = 3;
   */
  count: number;
};

/**
 * Describes the message gazel.api.v1.GetTargetOutputsResponse.
 * Use `create(GetTargetOutputsResponseSchema)` to create a new message.
 */
export const GetTargetOutputsResponseSchema: GenMessage<GetTargetOutputsResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 27);

/**
 * @generated from message gazel.api.v1.GetReverseDependenciesRequest
 */
export type GetReverseDependenciesRequest = Message<"gazel.api.v1.GetReverseDependenciesRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message gazel.api.v1.GetReverseDependenciesRequest.
 * Use `create(GetReverseDependenciesRequestSchema)` to create a new message.
 */
export const GetReverseDependenciesRequestSchema: GenMessage<GetReverseDependenciesRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 28);

/**
 * @generated from message gazel.api.v1.GetReverseDependenciesResponse
 */
export type GetReverseDependenciesResponse = Message<"gazel.api.v1.GetReverseDependenciesResponse"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget dependencies = 3;
   */
  dependencies: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.GetReverseDependenciesResponse.
 * Use `create(GetReverseDependenciesResponseSchema)` to create a new message.
 */
export const GetReverseDependenciesResponseSchema: GenMessage<GetReverseDependenciesResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 29);

/**
 * @generated from message gazel.api.v1.SearchTargetsRequest
 */
export type SearchTargetsRequest = Message<"gazel.api.v1.SearchTargetsRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * @generated from field: string package = 3;
   */
  package: string;
};

/**
 * Describes the message gazel.api.v1.SearchTargetsRequest.
 * Use `create(SearchTargetsRequestSchema)` to create a new message.
 */
export const SearchTargetsRequestSchema: GenMessage<SearchTargetsRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 30);

/**
 * @generated from message gazel.api.v1.SearchTargetsResponse
 */
export type SearchTargetsResponse = Message<"gazel.api.v1.SearchTargetsResponse"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: int32 total = 2;
   */
  total: number;

  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 3;
   */
  targets: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.SearchTargetsResponse.
 * Use `create(SearchTargetsResponseSchema)` to create a new message.
 */
export const SearchTargetsResponseSchema: GenMessage<SearchTargetsResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 31);

/**
 * Query Service Messages
 *
 * @generated from message gazel.api.v1.ExecuteQueryRequest
 */
export type ExecuteQueryRequest = Message<"gazel.api.v1.ExecuteQueryRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;
};

/**
 * Describes the message gazel.api.v1.ExecuteQueryRequest.
 * Use `create(ExecuteQueryRequestSchema)` to create a new message.
 */
export const ExecuteQueryRequestSchema: GenMessage<ExecuteQueryRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 32);

/**
 * @generated from message gazel.api.v1.ExecuteQueryResponse
 */
export type ExecuteQueryResponse = Message<"gazel.api.v1.ExecuteQueryResponse"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;

  /**
   * @generated from field: gazel.api.v1.QueryResult result = 3;
   */
  result?: QueryResult;

  /**
   * @generated from field: string raw = 4;
   */
  raw: string;
};

/**
 * Describes the message gazel.api.v1.ExecuteQueryResponse.
 * Use `create(ExecuteQueryResponseSchema)` to create a new message.
 */
export const ExecuteQueryResponseSchema: GenMessage<ExecuteQueryResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 33);

/**
 * @generated from message gazel.api.v1.QueryResult
 */
export type QueryResult = Message<"gazel.api.v1.QueryResult"> & {
  /**
   * @generated from field: repeated gazel.api.v1.BazelTarget targets = 1;
   */
  targets: BazelTarget[];
};

/**
 * Describes the message gazel.api.v1.QueryResult.
 * Use `create(QueryResultSchema)` to create a new message.
 */
export const QueryResultSchema: GenMessage<QueryResult> = /*@__PURE__*/
  messageDesc(file_gazel, 34);

/**
 * @generated from message gazel.api.v1.StreamQueryRequest
 */
export type StreamQueryRequest = Message<"gazel.api.v1.StreamQueryRequest"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * @generated from field: string output_format = 2;
   */
  outputFormat: string;

  /**
   * @generated from field: bool parse_xml = 3;
   */
  parseXml: boolean;
};

/**
 * Describes the message gazel.api.v1.StreamQueryRequest.
 * Use `create(StreamQueryRequestSchema)` to create a new message.
 */
export const StreamQueryRequestSchema: GenMessage<StreamQueryRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 35);

/**
 * @generated from message gazel.api.v1.StreamQueryResponse
 */
export type StreamQueryResponse = Message<"gazel.api.v1.StreamQueryResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.StreamQueryResponse.data
   */
  data: {
    /**
     * @generated from field: gazel.api.v1.BazelTarget target = 1;
     */
    value: BazelTarget;
    case: "target";
  } | {
    /**
     * @generated from field: string raw_line = 2;
     */
    value: string;
    case: "rawLine";
  } | {
    /**
     * @generated from field: string error = 3;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.StreamQueryResponse.
 * Use `create(StreamQueryResponseSchema)` to create a new message.
 */
export const StreamQueryResponseSchema: GenMessage<StreamQueryResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 36);

/**
 * Command Service Messages
 *
 * @generated from message gazel.api.v1.BuildTargetRequest
 */
export type BuildTargetRequest = Message<"gazel.api.v1.BuildTargetRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[];
};

/**
 * Describes the message gazel.api.v1.BuildTargetRequest.
 * Use `create(BuildTargetRequestSchema)` to create a new message.
 */
export const BuildTargetRequestSchema: GenMessage<BuildTargetRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 37);

/**
 * @generated from message gazel.api.v1.BuildTargetResponse
 */
export type BuildTargetResponse = Message<"gazel.api.v1.BuildTargetResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string output = 2;
   */
  output: string;

  /**
   * @generated from field: string stderr = 3;
   */
  stderr: string;

  /**
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message gazel.api.v1.BuildTargetResponse.
 * Use `create(BuildTargetResponseSchema)` to create a new message.
 */
export const BuildTargetResponseSchema: GenMessage<BuildTargetResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 38);

/**
 * @generated from message gazel.api.v1.StreamBuildRequest
 */
export type StreamBuildRequest = Message<"gazel.api.v1.StreamBuildRequest"> & {
  /**
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * @generated from field: repeated string options = 2;
   */
  options: string[];
};

/**
 * Describes the message gazel.api.v1.StreamBuildRequest.
 * Use `create(StreamBuildRequestSchema)` to create a new message.
 */
export const StreamBuildRequestSchema: GenMessage<StreamBuildRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 39);

/**
 * @generated from message gazel.api.v1.StreamBuildResponse
 */
export type StreamBuildResponse = Message<"gazel.api.v1.StreamBuildResponse"> & {
  /**
   * @generated from oneof gazel.api.v1.StreamBuildResponse.event
   */
  event: {
    /**
     * @generated from field: string output = 1;
     */
    value: string;
    case: "output";
  } | {
    /**
     * @generated from field: string error = 2;
     */
    value: string;
    case: "error";
  } | {
    /**
     * @generated from field: gazel.api.v1.BuildProgress progress = 3;
     */
    value: BuildProgress;
    case: "progress";
  } | {
    /**
     * @generated from field: gazel.api.v1.BuildComplete complete = 4;
     */
    value: BuildComplete;
    case: "complete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message gazel.api.v1.StreamBuildResponse.
 * Use `create(StreamBuildResponseSchema)` to create a new message.
 */
export const StreamBuildResponseSchema: GenMessage<StreamBuildResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 40);

/**
 * @generated from message gazel.api.v1.BuildProgress
 */
export type BuildProgress = Message<"gazel.api.v1.BuildProgress"> & {
  /**
   * @generated from field: int32 actions_completed = 1;
   */
  actionsCompleted: number;

  /**
   * @generated from field: int32 actions_total = 2;
   */
  actionsTotal: number;

  /**
   * @generated from field: string current_action = 3;
   */
  currentAction: string;
};

/**
 * Describes the message gazel.api.v1.BuildProgress.
 * Use `create(BuildProgressSchema)` to create a new message.
 */
export const BuildProgressSchema: GenMessage<BuildProgress> = /*@__PURE__*/
  messageDesc(file_gazel, 41);

/**
 * @generated from message gazel.api.v1.BuildComplete
 */
export type BuildComplete = Message<"gazel.api.v1.BuildComplete"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: int32 exit_code = 2;
   */
  exitCode: number;

  /**
   * @generated from field: int64 duration_ms = 3;
   */
  durationMs: bigint;
};

/**
 * Describes the message gazel.api.v1.BuildComplete.
 * Use `create(BuildCompleteSchema)` to create a new message.
 */
export const BuildCompleteSchema: GenMessage<BuildComplete> = /*@__PURE__*/
  messageDesc(file_gazel, 42);

/**
 * Module Service Messages
 *
 * @generated from message gazel.api.v1.GetModuleGraphRequest
 */
export type GetModuleGraphRequest = Message<"gazel.api.v1.GetModuleGraphRequest"> & {
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphRequest.
 * Use `create(GetModuleGraphRequestSchema)` to create a new message.
 */
export const GetModuleGraphRequestSchema: GenMessage<GetModuleGraphRequest> = /*@__PURE__*/
  messageDesc(file_gazel, 43);

/**
 * @generated from message gazel.api.v1.GetModuleGraphResponse
 */
export type GetModuleGraphResponse = Message<"gazel.api.v1.GetModuleGraphResponse"> & {
  /**
   * @generated from field: string root = 1;
   */
  root: string;

  /**
   * @generated from field: repeated gazel.api.v1.Module modules = 2;
   */
  modules: Module[];

  /**
   * @generated from field: repeated gazel.api.v1.ModuleDependency dependencies = 3;
   */
  dependencies: ModuleDependency[];

  /**
   * @generated from field: gazel.api.v1.ModuleStatistics statistics = 4;
   */
  statistics?: ModuleStatistics;
};

/**
 * Describes the message gazel.api.v1.GetModuleGraphResponse.
 * Use `create(GetModuleGraphResponseSchema)` to create a new message.
 */
export const GetModuleGraphResponseSchema: GenMessage<GetModuleGraphResponse> = /*@__PURE__*/
  messageDesc(file_gazel, 44);

/**
 * @generated from message gazel.api.v1.ModuleStatistics
 */
export type ModuleStatistics = Message<"gazel.api.v1.ModuleStatistics"> & {
  /**
   * @generated from field: int32 total_modules = 1;
   */
  totalModules: number;

  /**
   * @generated from field: int32 direct_dependencies = 2;
   */
  directDependencies: number;

  /**
   * @generated from field: int32 dev_dependencies = 3;
   */
  devDependencies: number;

  /**
   * @generated from field: int32 indirect_dependencies = 4;
   */
  indirectDependencies: number;
};

/**
 * Describes the message gazel.api.v1.ModuleStatistics.
 * Use `create(ModuleStatisticsSchema)` to create a new message.
 */
export const ModuleStatisticsSchema: GenMessage<ModuleStatistics> = /*@__PURE__*/
  messageDesc(file_gazel, 45);

/**
 * @generated from service gazel.api.v1.GazelService
 */
export const GazelService: GenService<{
  /**
   * Workspace operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetWorkspaceInfo
   */
  getWorkspaceInfo: {
    methodKind: "unary";
    input: typeof GetWorkspaceInfoRequestSchema;
    output: typeof GetWorkspaceInfoResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetCurrentWorkspace
   */
  getCurrentWorkspace: {
    methodKind: "unary";
    input: typeof GetCurrentWorkspaceRequestSchema;
    output: typeof GetCurrentWorkspaceResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.ScanWorkspaces
   */
  scanWorkspaces: {
    methodKind: "unary";
    input: typeof ScanWorkspacesRequestSchema;
    output: typeof ScanWorkspacesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SwitchWorkspace
   */
  switchWorkspace: {
    methodKind: "unary";
    input: typeof SwitchWorkspaceRequestSchema;
    output: typeof SwitchWorkspaceResponseSchema;
  },
  /**
   * Target operations
   *
   * @generated from rpc gazel.api.v1.GazelService.ListTargets
   */
  listTargets: {
    methodKind: "unary";
    input: typeof ListTargetsRequestSchema;
    output: typeof ListTargetsResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTarget
   */
  getTarget: {
    methodKind: "unary";
    input: typeof GetTargetRequestSchema;
    output: typeof GetTargetResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTargetDependencies
   */
  getTargetDependencies: {
    methodKind: "unary";
    input: typeof GetTargetDependenciesRequestSchema;
    output: typeof GetTargetDependenciesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetTargetOutputs
   */
  getTargetOutputs: {
    methodKind: "unary";
    input: typeof GetTargetOutputsRequestSchema;
    output: typeof GetTargetOutputsResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.GetReverseDependencies
   */
  getReverseDependencies: {
    methodKind: "unary";
    input: typeof GetReverseDependenciesRequestSchema;
    output: typeof GetReverseDependenciesResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.SearchTargets
   */
  searchTargets: {
    methodKind: "unary";
    input: typeof SearchTargetsRequestSchema;
    output: typeof SearchTargetsResponseSchema;
  },
  /**
   * Query operations
   *
   * @generated from rpc gazel.api.v1.GazelService.ExecuteQuery
   */
  executeQuery: {
    methodKind: "unary";
    input: typeof ExecuteQueryRequestSchema;
    output: typeof ExecuteQueryResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.StreamQuery
   */
  streamQuery: {
    methodKind: "server_streaming";
    input: typeof StreamQueryRequestSchema;
    output: typeof StreamQueryResponseSchema;
  },
  /**
   * Build operations
   *
   * @generated from rpc gazel.api.v1.GazelService.BuildTarget
   */
  buildTarget: {
    methodKind: "unary";
    input: typeof BuildTargetRequestSchema;
    output: typeof BuildTargetResponseSchema;
  },
  /**
   * @generated from rpc gazel.api.v1.GazelService.StreamBuild
   */
  streamBuild: {
    methodKind: "server_streaming";
    input: typeof StreamBuildRequestSchema;
    output: typeof StreamBuildResponseSchema;
  },
  /**
   * Module operations
   *
   * @generated from rpc gazel.api.v1.GazelService.GetModuleGraph
   */
  getModuleGraph: {
    methodKind: "unary";
    input: typeof GetModuleGraphRequestSchema;
    output: typeof GetModuleGraphResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_gazel, 0);

